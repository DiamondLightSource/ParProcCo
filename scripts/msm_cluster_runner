#!/usr/bin/env python
# -*- coding: utf-8 -*-

from __future__ import annotations

import argparse
import os
import subprocess
from pathlib import Path
from typing import Union


def check_location(location: Union[Path, str]) -> Path:
    location_path = Path(location)
    if Path("/dls") in location_path.parents or Path("/home") in location_path.parents or Path("/dls_sw") in location_path.parents:
        return location_path
    raise ValueError(f"{location_path} must be located within /dls, /dls_sw or /home")


def get_absolute_path(filename: Union[Path, str]) -> str:
    python_path = os.environ['PYTHONPATH'].split(os.pathsep)
    for search_path in python_path:
        for root, dir, files in os.walk(search_path):
            if filename in files:
                return os.path.join(root, filename)

    return os.path.abspath(filename)


def create_parser():
    parser = argparse.ArgumentParser(description='Miller Space Mapper run script for use with ParProcCo')
    parser.add_argument('--output_path', help='str: output file path', required=True)
    parser.add_argument('-I', help='str: image slice parameter', required=True)
    return parser


def run_rs_map(args, script_args):
    print("args are: ", args)
    print("script_args are: ", script_args)
    script = check_location(get_absolute_path(script_args[0]))
    jobscript = script_args[0]

    script_args = [jobscript, "-o", args.output_path, "-I", args.I] + script_args[1:]
    print("script_args are: ", script_args)
    print("script is: ", script)

    proc = subprocess.Popen(script_args)
    proc.communicate()
    print("complete")


if __name__ == '__main__':
    args, script_args = create_parser().parse_known_args()
    print(f"Parsing {args}")
    run_rs_map(args, script_args)
