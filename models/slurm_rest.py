# generated by datamodel-codegen:
#   filename:  slurm-api.yaml
#   timestamp: 2023-08-14T12:55:28+00:00

from __future__ import annotations

from enum import Enum
from typing import Any

from pydantic import BaseModel, Field, RootModel


class Default(BaseModel):
    """
    Default settings
    """

    qos: str | None = None
    """
    Default QOS
    """


class Per(BaseModel):
    """
    Max jobs per settings
    """

    wall_clock: int | None = None
    """
    Max wallclock per job
    """


class Jobs(BaseModel):
    """
    Max jobs settings
    """

    per: Per | None = None
    """
    Max jobs per settings
    """


class Account(BaseModel):
    """
    Max per accounting settings
    """

    wall_clock: int | None = None
    """
    Max wallclock per account
    """


class Per1(BaseModel):
    """
    Max per settings
    """

    account: Account | None = None
    """
    Max per accounting settings
    """


class Min(BaseModel):
    """
    Min settings
    """

    priority_threshold: int | None = None
    """
    Min priority threshold
    """


class Usage(BaseModel):
    """
    Association usage
    """

    accrue_job_count: int | None = None
    """
    Jobs accuring priority
    """
    effective_normalized_usage: float | None = None
    """
    Effective normalized usage
    """
    fairshare_factor: float | None = None
    """
    Fairshare factor
    """
    fairshare_level: float | None = None
    """
    Fairshare level
    """
    fairshare_shares: int | None = None
    """
    Fairshare shares
    """
    group_used_wallclock: float | None = None
    """
    Group used wallclock time (s)
    """
    job_count: int | None = None
    """
    Total jobs submitted
    """
    normalized_priority: int | None = None
    """
    Currently active jobs
    """
    normalized_shares: float | None = None
    """
    Normalized shares
    """
    raw_usage: int | None = None
    """
    Raw usage
    """


class DbAssociationShortInfo(BaseModel):
    account: str | None = None
    """
    Account name
    """
    cluster: str | None = None
    """
    Cluster name
    """
    partition: str | None = None
    """
    Partition name (optional)
    """
    user: str | None = None
    """
    User name
    """


class Associations(BaseModel):
    """
    Information about associations
    """

    root: DbAssociationShortInfo | None = None


class Controller(BaseModel):
    """
    Information about controller
    """

    host: str | None = None
    """
    Hostname
    """
    port: int | None = None
    """
    Port number
    """


class DbCoordinatorInfo(BaseModel):
    direct: int | None = None
    """
    If user is coordinator of this account directly or coordinator status was inherited
    from a higher account in the tree
    """
    name: str | None = None
    """
    Name of user
    """


class Time(BaseModel):
    """
    Time values
    """

    average: int | None = None
    """
    Average time spent processing this RPC type
    """
    total: int | None = None
    """
    Total time spent processing this RPC type
    """


class RPC(BaseModel):
    """
    Statistics by RPC type
    """

    count: int | None = None
    """
    Number of RPCs
    """
    rpc: str | None = None
    """
    RPC type
    """
    time: Time | None = None
    """
    Time values
    """


class Rollup(BaseModel):
    """
    Rollup statistics
    """

    last_cycle: int | None = None
    """
    Timestamp of last cycle
    """
    last_run: int | None = None
    """
    Timestamp of last rollup
    """
    max_cycle: int | None = None
    """
    Max time of all cycles
    """
    mean_cycles: int | None = None
    """
    Average time (s) of cycle
    """
    total_time: int | None = None
    """
    Total time (s) spent doing rollup
    """
    type: str | None = None
    """
    Type of rollup
    """


class Time1(BaseModel):
    """
    Time values
    """

    average: int | None = None
    """
    Average time spent processing each user RPC
    """
    total: int | None = None
    """
    Total time spent processing each user RPC
    """


class User(BaseModel):
    """
    Statistics by user RPCs
    """

    count: int | None = None
    """
    Number of RPCs
    """
    time: Time1 | None = None
    """
    Time values
    """
    user: str | None = None
    """
    User name
    """


class Statistics(BaseModel):
    RPCs: list[RPC] | None = None
    rollups: list[Rollup] | None = None
    time_start: int | None = None
    """
    Unix timestamp of start time
    """
    users: list[User] | None = None


class DbError(BaseModel):
    description: str | None = None
    """
    Explaination of cause of error
    """
    error: str | None = None
    """
    Error message
    """
    error_number: int | None = None
    """
    Slurm internal error number
    """
    source: str | None = None
    """
    Where error occured in the source
    """


class DbErrors(RootModel):
    """
    Slurm errors
    """

    root: list[DbError]
    """
    Slurm errors
    """


class Running(BaseModel):
    """
    Limits on array settings
    """

    tasks: int | None = None
    """
    Max running tasks in array at any one time
    """


class Max1(BaseModel):
    """
    Limits on array settings
    """

    running: Running | None = None
    """
    Limits on array settings
    """


class Limits(BaseModel):
    """
    Limits on array settings
    """

    max: Max1 | None = None
    """
    Limits on array settings
    """


class Array(BaseModel):
    """
    Array properties (optional)
    """

    job_id: int | None = None
    """
    Job id of array
    """
    limits: Limits | None = None
    """
    Limits on array settings
    """
    task: str | None = None
    """
    Array task
    """
    task_id: int | None = None
    """
    Array task id
    """


class Comment(BaseModel):
    """
    Job comments by type
    """

    administrator: str | None = None
    """
    Administrator set comment
    """
    job: str | None = None
    """
    Job comment
    """
    system: str | None = None
    """
    System set comment
    """


class Het(BaseModel):
    """
    Heterogeneous Job details (optional)
    """

    job_id: int | None = None
    """
    Parent HetJob id
    """
    job_offset: int | None = None
    """
    Offset of this job to parent
    """


class Mcs(BaseModel):
    """
    Multi-Category Security
    """

    label: str | None = None
    """
    Assigned MCS label
    """


class Required(BaseModel):
    """
    Job run requirements
    """

    CPUs: int | None = None
    """
    Required number of CPUs
    """
    memory: int | None = None
    """
    Required amount of memory (MiB)
    """


class Reservation(BaseModel):
    """
    Reservation usage details
    """

    id: int | None = None
    """
    Database id of reservation
    """
    name: int | None = None
    """
    Name of reservation
    """


class State(BaseModel):
    """
    State properties of job
    """

    current: str | None = None
    """
    Current state of job
    """
    reason: str | None = None
    """
    Last reason job didn't run
    """


class System(BaseModel):
    """
    System time values
    """

    microseconds: int | None = None
    """
    Total number of CPU-seconds used by the system on behalf of the process (in kernel
    mode), in microseconds
    """
    seconds: int | None = None
    """
    Total number of CPU-seconds used by the system on behalf of the process (in kernel
    mode), in seconds
    """


class Total(BaseModel):
    """
    System time values
    """

    microseconds: int | None = None
    """
    Total number of CPU-seconds used by the job, in microseconds
    """
    seconds: int | None = None
    """
    Total number of CPU-seconds used by the job, in seconds
    """


class User1(BaseModel):
    """
    User land time values
    """

    microseconds: int | None = None
    """
    Total number of CPU-seconds used by the job in user land, in microseconds
    """
    seconds: int | None = None
    """
    Total number of CPU-seconds used by the job in user land, in seconds
    """


class Time2(BaseModel):
    """
    Time properties
    """

    elapsed: int | None = None
    """
    Total time elapsed
    """
    eligible: int | None = None
    """
    Total time eligible to run
    """
    end: int | None = None
    """
    Timestamp of when job ended
    """
    limit: int | None = None
    """
    Job wall clock time limit
    """
    start: int | None = None
    """
    Timestamp of when job started
    """
    submission: int | None = None
    """
    Timestamp of when job submitted
    """
    suspended: int | None = None
    """
    Timestamp of when job last suspended
    """
    system: System | None = None
    """
    System time values
    """
    total: Total | None = None
    """
    System time values
    """
    user: User1 | None = None
    """
    User land time values
    """


class Wckey(BaseModel):
    """
    Job assigned wckey details
    """

    flags: list[str] | None = None
    """
    wckey flags
    """
    wckey: str | None = None
    """
    Job assigned wckey
    """


class Signal(BaseModel):
    """
    Signal details (if signaled)
    """

    name: str | None = None
    """
    Name of signal received
    """
    signal_id: int | None = None
    """
    Signal number process received
    """


class DbJobExitCode(BaseModel):
    return_code: int | None = None
    """
    Return code from parent process
    """
    signal: Signal | None = None
    """
    Signal details (if signaled)
    """
    status: str | None = None
    """
    Job exit status
    """


class RequestedFrequency(BaseModel):
    """
    CPU frequency requested
    """

    max: int | None = None
    """
    Max CPU frequency
    """
    min: int | None = None
    """
    Min CPU frequency
    """


class CPU(BaseModel):
    """
    CPU properties
    """

    governor: list[str] | None = None
    """
    CPU governor
    """
    requested_frequency: RequestedFrequency | None = None
    """
    CPU frequency requested
    """


class Nodes(BaseModel):
    """
    Node details
    """

    count: int | None = None
    """
    Total number of nodes in step
    """
    range: str | None = None
    """
    Nodes in step
    """


class CPU1(BaseModel):
    """
    Statistics of CPU
    """

    actual_frequency: int | None = None
    """
    Actual frequency of CPU during step
    """


class Energy(BaseModel):
    """
    Statistics of energy
    """

    consumed: int | None = None
    """
    Energy consumed during step
    """


class Statistics1(BaseModel):
    """
    Statistics of job step
    """

    CPU: CPU1 | None = None
    """
    Statistics of CPU
    """
    energy: Energy | None = None
    """
    Statistics of energy
    """


class Het1(BaseModel):
    """
    Heterogeneous job details
    """

    component: int | None = None
    """
    Parent HetJob component id
    """


class Step(BaseModel):
    """
    Step details
    """

    het: Het1 | None = None
    """
    Heterogeneous job details
    """
    id: str | None = None
    """
    Step id
    """
    job_id: int | None = None
    """
    Parent job id
    """
    name: str | None = None
    """
    Step name
    """


class Tasks(BaseModel):
    """
    Task properties
    """

    count: int | None = None
    """
    Number of tasks in step
    """


class Time3(BaseModel):
    """
    Time properties
    """

    elapsed: int | None = None
    """
    Total time elapsed
    """
    end: int | None = None
    """
    Timestamp of when job ended
    """
    start: int | None = None
    """
    Timestamp of when job started
    """
    suspended: int | None = None
    """
    Timestamp of when job last suspended
    """
    system: System | None = None
    """
    System time values
    """
    total: Total | None = None
    """
    System time values
    """
    user: User1 | None = None
    """
    User land time values
    """


class Version(BaseModel):
    major: str | None = None
    micro: str | None = None
    minor: str | None = None


class Slurm(BaseModel):
    """
    Slurm information
    """

    release: str | None = None
    """
    version specifier
    """
    version: Version | None = None


class Plugin(BaseModel):
    name: str | None = None
    type: str | None = None


class DbMeta(BaseModel):
    slurm: Slurm | None = Field(None, validation_alias="Slurm")
    """
    Slurm information
    """
    plugin: Plugin | None = None


class Per4(BaseModel):
    """
    Max accuring priority per setting
    """

    account: int | None = None
    """
    Max accuring priority per account
    """
    user: int | None = None
    """
    Max accuring priority per user
    """


class Accruing(BaseModel):
    """
    Limits on accruing priority
    """

    per: Per4 | None = None
    """
    Max accuring priority per setting
    """


class Per5(BaseModel):
    """
    Limits on active jobs per settings
    """

    account: int | None = None
    """
    Max jobs per account
    """
    user: int | None = None
    """
    Max jobs per user
    """


class ActiveJobs(BaseModel):
    """
    Limits on active jobs settings
    """

    per: Per5 | None = None
    """
    Limits on active jobs per settings
    """


class Jobs1(BaseModel):
    """
    Limits on jobs settings
    """

    active_jobs: ActiveJobs | None = None
    """
    Limits on active jobs settings
    """


class Per8(BaseModel):
    """
    Limit on wallclock per settings
    """

    job: int | None = None
    """
    Max wallclock per job
    """
    qos: int | None = None
    """
    Max wallclock per QOS
    """


class WallClock(BaseModel):
    """
    Limit on wallclock settings
    """

    per: Per8 | None = None
    """
    Limit on wallclock per settings
    """


class Preempt(BaseModel):
    """
    Preemption settings
    """

    exempt_time: int | None = None
    """
    Grace period (s) before jobs can preempted
    """
    qos: list[str] | None = Field(None, validation_alias="list")
    """
    List of preemptable QOS
    """
    mode: list[str] | None = None
    """
    List of preemption modes
    """


class DbTresListItem(BaseModel):
    count: int | None = None
    """
    count of TRES
    """
    id: int | None = None
    """
    database id
    """
    name: str | None = None
    """
    TRES name (optional)
    """
    type: str | None = None
    """
    TRES type
    """


class DbTresList(RootModel):
    """
    TRES list of attributes
    """

    root: list[DbTresListItem]
    """
    TRES list of attributes
    """


class DbTresUpdate(BaseModel):
    tres: DbTresList | None = None


class Default1(BaseModel):
    """
    Default settings
    """

    account: str | None = None
    """
    Default account name
    """
    wckey: str | None = None
    """
    Default wckey
    """


class DbUser(BaseModel):
    """
    User description
    """

    administrator_level: str | None = None
    """
    Description of administrator level
    """
    associations: list[DbAssociationShortInfo] | None = None
    """
    Assigned associations
    """
    coordinators: list[DbCoordinatorInfo] | None = None
    """
    List of assigned coordinators
    """
    default: Default1 | None = None
    """
    Default settings
    """
    flags: list[str] | None = None
    """
    List of properties of user
    """
    name: str | None = None
    """
    User name
    """


class DiagRpcm(BaseModel):
    average_time: int | None = None
    """
    average time
    """
    count: int | None = None
    """
    rpc count
    """
    message_type: str | None = None
    """
    message type
    """
    total_time: int | None = None
    """
    total time
    """
    type_id: int | None = None
    """
    message type id
    """


class DiagRpcu(BaseModel):
    average_time: int | None = None
    """
    average time
    """
    count: int | None = None
    """
    rpc count
    """
    total_time: int | None = None
    """
    total time
    """
    user: str | None = None
    """
    user
    """
    user_id: int | None = None
    """
    user id
    """


class Error(BaseModel):
    error: str | None = None
    """
    error message
    """
    error_number: int | None = None
    """
    Slurm internal error number
    """


class Errors(RootModel):
    """
    Slurm errors
    """

    root: list[Error]
    """
    Slurm errors
    """


class Exclusive(Enum):
    """
    The job allocation can share nodes just other users with the "user" option or
    with the "mcs" option).
    """

    user = "user"
    mcs = "mcs"
    true = "true"
    false = "false"


class GresFlags(Enum):
    """
    Specify generic resource task binding options.
    """

    disable_binding = "disable-binding"
    enforce_binding = "enforce-binding"


class OpenMode(Enum):
    """
    Open the output and error files using append or truncate mode as specified.
    """

    append = "append"
    truncate = "truncate"


class JobProperties(BaseModel):
    account: str | None = None
    """
    Charge resources used by this job to specified account.
    """
    account_gather_frequency: str | None = None
    """
    Define the job accounting and profiling sampling intervals.
    """
    argv: list[str] | None = None
    """
    Arguments to the script.
    """
    array: str | None = None
    """
    Submit a job array, multiple jobs to be executed with identical parameters. The
    indexes specification identifies what array index values should be used.
    """
    batch_features: str | None = None
    """
    features required for batch script's node
    """
    begin_time: int | None = None
    """
    Submit the batch script to the Slurm controller immediately, like normal, but tell
    the controller to defer the allocation of the job until the specified time.
    """
    burst_buffer: str | None = None
    """
    Burst buffer specification.
    """
    cluster_constraint: str | None = None
    """
    Specifies features that a federated cluster must have to have a sibling job
    submitted to it.
    """
    comment: str | None = None
    """
    An arbitrary comment.
    """
    constraints: str | None = None
    """
    node features required by job.
    """
    container: str | None = None
    """
    absolute path to OCI container bundle
    """
    core_specification: int | None = None
    """
    Count of specialized threads per node reserved by the job for system operations
    and not used by the application.
    """
    cores_per_socket: int | None = None
    """
    Restrict node selection to nodes with at least the specified number of cores per
    socket.
    """
    cpu_binding: str | None = None
    """
    Cpu binding
    """
    cpu_binding_hint: str | None = None
    """
    Cpu binding hint
    """
    cpu_frequency: str | None = None
    """
    Request that job steps initiated by srun commands inside this sbatch script be
    run at some requested frequency if possible, on the CPUs selected for the step
    on the compute node(s).
    """
    cpus_per_gpu: str | None = None
    """
    Number of CPUs requested per allocated GPU.
    """
    cpus_per_task: int | None = None
    """
    Advise the Slurm controller that ensuing job steps will require ncpus number
    of processors per task.
    """
    current_working_directory: str | None = None
    """
    Instruct Slurm to connect the batch script's standard output directly to the
    file name.
    """
    deadline: str | None = None
    """
    Remove the job if no ending is possible before this deadline
    (start > (deadline - time[-min])).
    """
    delay_boot: int | None = None
    """
    Do not reboot nodes in order to satisfied this job's feature specification if
    the job has been eligible to run for less than this time period.
    """
    dependency: str | None = None
    """
    Defer the start of this job until the specified dependencies have been
    satisfied completed.
    """
    distribution: str | None = None
    """
    Specify alternate distribution methods for remote processes.
    """
    environment: dict[str, Any]
    """
    Dictionary of environment entries.
    """
    exclusive: Exclusive | None = None
    """
    The job allocation can share nodes just other users with the "user" option or
    with the "mcs" option).
    """
    get_user_environment: bool | None = None
    """
    Load new login environment for user on job node.
    """
    gpu_binding: str | None = None
    """
    Requested binding of tasks to GPU.
    """
    gpu_frequency: str | None = None
    """
    Requested GPU frequency.
    """
    gpus: str | None = None
    """
    GPUs per job.
    """
    gpus_per_node: str | None = None
    """
    GPUs per node.
    """
    gpus_per_socket: str | None = None
    """
    GPUs per socket.
    """
    gpus_per_task: str | None = None
    """
    GPUs per task.
    """
    gres: str | None = None
    """
    Specifies a comma delimited list of generic consumable resources.
    """
    gres_flags: GresFlags | None = None
    """
    Specify generic resource task binding options.
    """
    hold: bool | None = None
    """
    Specify the job is to be submitted in a held state (priority of zero).
    """
    kill_on_invalid_dependency: bool | None = None
    """
    If a job has an invalid dependency, then Slurm is to terminate it.
    """
    licenses: str | None = None
    """
    Specification of licenses (or other resources available on all nodes of
    the cluster) which must be allocated to this job.
    """
    mail_type: str | None = None
    """
    Notify user by email when certain event types occur.
    """
    mail_user: str | None = None
    """
    User to receive email notification of state changes as defined by mail_type.
    """
    mcs_label: str | None = None
    """
    This parameter is a group among the groups of the user.
    """
    memory_binding: str | None = None
    """
    Bind tasks to memory.
    """
    memory_per_cpu: int | None = None
    """
    Minimum real memory per cpu (MB).
    """
    memory_per_gpu: int | None = None
    """
    Minimum memory required per allocated GPU.
    """
    memory_per_node: int | None = None
    """
    Minimum real memory per node (MB).
    """
    minimum_cpus_per_node: int | None = None
    """
    Minimum number of CPUs per node.
    """
    minimum_nodes: bool | None = None
    """
    If a range of node counts is given, prefer the smaller count.
    """
    name: str | None = None
    """
    Specify a name for the job allocation.
    """
    nice: int | None = None
    """
    Run the job with an adjusted scheduling priority within Slurm.
    """
    no_kill: bool | None = None
    """
    Do not automatically terminate a job if one of the nodes it has been allocated
    fails.
    """
    nodes: list[int] | None = Field(None, max_length=2, min_length=1)
    """
    Request that a minimum of minnodes nodes and a maximum node count.
    """
    open_mode: OpenMode | None = OpenMode.append
    """
    Open the output and error files using append or truncate mode as specified.
    """
    oversubscribe: bool | None = False
    """
    The job allocation can over-subscribe resources with other running jobs.
    """
    partition: str | None = None
    """
    Request a specific partition for the resource allocation.
    """
    prefer: str | None = None
    """
    Comma delimited list of features for scheduler to prefer but not a strict
    requirement like a constraint. Value can be used for job submission but is
    only displayed for PENDING jobs.
    """
    priority: str | None = None
    """
    Request a specific job priority.
    """
    qos: str | None = None
    """
    Request a quality of service for the job.
    """
    requeue: bool | None = None
    """
    Specifies that the batch job should eligible to being requeue.
    """
    reservation: str | None = None
    """
    Allocate resources for the job from the named reservation.
    """
    signal: str | None = Field(None, pattern="(B:|)sig_num(@sig_time|)")
    """
    When a job is within sig_time seconds of its end time, send it the signal sig_num.
    """
    sockets_per_node: int | None = None
    """
    Restrict node selection to nodes with at least the specified number of sockets.
    """
    spread_job: bool | None = None
    """
    Spread the job allocation over as many nodes as possible and attempt to evenly
    distribute tasks across the allocated nodes.
    """
    standard_error: str | None = None
    """
    Instruct Slurm to connect the batch script's standard error directly to the
    file name.
    """
    standard_input: str | None = None
    """
    Instruct Slurm to connect the batch script's standard input directly to the
    file name specified.
    """
    standard_output: str | None = None
    """
    Instruct Slurm to connect the batch script's standard output directly to the
    file name.
    """
    tasks: int | None = None
    """
    Advises the Slurm controller that job steps run within the allocation will
    launch a maximum of number tasks and to provide for sufficient resources.
    """
    tasks_per_core: int | None = None
    """
    Request the maximum ntasks be invoked on each core.
    """
    tasks_per_node: int | None = None
    """
    Request the maximum ntasks be invoked on each node.
    """
    tasks_per_socket: int | None = None
    """
    Request the maximum ntasks be invoked on each socket.
    """
    thread_specification: int | None = None
    """
    Count of specialized threads per node reserved by the job for system operations
    and not used by the application.
    """
    threads_per_core: int | None = None
    """
    Restrict node selection to nodes with at least the specified number of threads
    per core.
    """
    time_limit: int | None = None
    """
    Step time limit in minutes.
    """
    time_minimum: int | None = None
    """
    Minimum run time in minutes.
    """
    wait_all_nodes: bool | None = None
    """
    Do not begin execution until all nodes are ready for use.
    """
    wckey: str | None = None
    """
    Specify wckey to be used with job.
    """


class JobSubmission(BaseModel):
    job: JobProperties | None = None
    jobs: list[JobProperties] | None = None
    """
    Properties of an HetJob
    """
    script: str
    """
    Executable script (full contents) to run in batch step
    """


class License(BaseModel):
    Free: int | None = None
    """
    number of licenses available
    """
    LicenseName: str | None = None
    """
    name of license
    """
    Remote: bool | None = None
    """
    license is remote
    """
    Reserved: int | None = None
    """
    number of licenses reserved
    """
    Total: int | None = None
    """
    total number of licenses
    """
    Used: int | None = None
    """
    number of licenses in use
    """


class Licenses(BaseModel):
    errors: list[Error] | None = None
    """
    slurm errors
    """
    licenses: list[License] | None = None
    """
    licenses info
    """


class Slurm1(BaseModel):
    """
    Slurm information
    """

    release: str | None = None
    """
    version specifier
    """
    version: Version | None = None


class Meta(BaseModel):
    Slurm: Slurm1 | None = None
    """
    Slurm information
    """
    plugin: Plugin | None = None


class Node(BaseModel):
    active_features: str | None = None
    """
    list of a node's available features
    """
    address: str | None = None
    """
    state after reboot
    """
    alloc_cpus: int | None = None
    """
    Allocated CPUs
    """
    alloc_memory: int | None = None
    """
    Allocated memory (MB)
    """
    architecture: str | None = None
    """
    computer architecture
    """
    boards: int | None = None
    """
    total number of boards per node
    """
    boot_time: int | None = None
    """
    timestamp of node boot
    """
    burstbuffer_network_address: str | None = None
    """
    BcastAddr
    """
    cores: int | None = None
    """
    number of cores per socket
    """
    cpu_binding: int | None = None
    """
    Default task binding
    """
    cpu_load: int | None = None
    """
    CPU load * 100
    """
    cpus: int | None = None
    """
    configured count of cpus running on the node
    """
    features: str | None = None
    free_memory: int | None = None
    """
    free memory in MiB
    """
    gres: str | None = None
    """
    list of a node's generic resources
    """
    gres_drained: str | None = None
    """
    list of drained GRES
    """
    gres_used: str | None = None
    """
    list of GRES in current use
    """
    hostname: str | None = None
    """
    node's hostname
    """
    idle_cpus: int | None = None
    """
    Idle CPUs
    """
    mcs_label: str | None = None
    """
    mcs label if mcs plugin in use
    """
    name: str | None = None
    """
    node name to slurm
    """
    next_state_after_reboot: str | None = None
    """
    state after reboot
    """
    next_state_after_reboot_flags: list[str] | None = None
    """
    node state flags
    """
    operating_system: str | None = None
    """
    operating system
    """
    owner: str | None = None
    """
    User allowed to use this node
    """
    partitions: list[str] | None = None
    """
    assigned partitions
    """
    port: int | None = None
    """
    TCP port number of the slurmd
    """
    real_memory: int | None = None
    """
    configured MB of real memory on the node
    """
    reason: str | None = None
    """
    reason for node being DOWN or DRAINING
    """
    reason_changed_at: int | None = None
    """
    Time stamp when reason was set
    """
    reason_set_by_user: str | None = None
    """
    User that set the reason
    """
    slurmd_start_time: int | None = None
    """
    timestamp of slurmd startup
    """
    slurmd_version: str | None = None
    """
    Slurmd version
    """
    sockets: int | None = None
    """
    total number of sockets per node
    """
    state: str | None = None
    """
    current node state
    """
    state_flags: list[str] | None = None
    """
    node state flags
    """
    temporary_disk: int | None = None
    """
    configured MB of total disk in TMP_FS
    """
    threads: int | None = None
    """
    number of threads per core
    """
    tres: str | None = None
    """
    TRES on node
    """
    tres_used: str | None = None
    """
    TRES used on node
    """
    tres_weighted: float | None = None
    """
    TRES weight used on node
    """
    weight: int | None = None
    """
    arbitrary priority of node for scheduling
    """


class Sockets(BaseModel):
    """
    assignment status of each socket by numeric socket id
    """

    cores: dict[str, Any] | None = None
    """
    assignment status of each core by core id in each socket
    """


class NodeAllocation(BaseModel):
    cpus: int | None = None
    """
    number of assigned job CPUs
    """
    memory: int | None = None
    """
    amount of assigned job memory
    """
    nodename: str | None = None
    """
    node name
    """
    sockets: Sockets | None = None
    """
    assignment status of each socket by numeric socket id
    """


class NodesResponse(BaseModel):
    errors: list[Error] | None = None
    """
    slurm errors
    """
    meta: Meta | None = None
    nodes: list[Node] | None = None
    """
    nodes info
    """


class Partition(BaseModel):
    allowed_accounts: str | None = None
    """
    comma delimited list of accounts
    """
    allowed_allocation_nodes: str | None = None
    """
    list names of allowed allocating nodes
    """
    allowed_groups: str | None = None
    """
    comma delimited list of groups
    """
    allowed_qos: str | None = None
    """
    comma delimited list of qos
    """
    alternative: str | None = None
    """
    name of alternate partition
    """
    billing_weights: str | None = None
    """
    TRES billing weights
    """
    default_memory_per_cpu: int | None = None
    """
    default MB memory per allocated CPU
    """
    default_memory_per_node: int | None = None
    """
    default MB memory per allocated node
    """
    default_time_limit: int | None = None
    """
    default time limit (minutes)
    """
    denied_accounts: str | None = None
    """
    comma delimited list of denied accounts
    """
    denied_qos: str | None = None
    """
    comma delimited list of denied qos
    """
    flags: list[str] | None = None
    """
    partition options
    """
    max_time_limit: int | None = None
    """
    Max time limit per job
    """
    maximum_cpus_per_node: int | None = None
    """
    maximum allocated CPUs per node
    """
    maximum_memory_per_cpu: int | None = None
    """
    maximum memory per allocated CPU (MiB)
    """
    maximum_memory_per_node: int | None = None
    """
    maximum memory per allocated node (MiB)
    """
    maximum_nodes_per_job: int | None = None
    """
    Max nodes per job
    """
    min_nodes_per_job: int | None = None
    """
    Min number of nodes per job
    """
    name: str | None = None
    """
    Partition name
    """
    nodes: str | None = None
    """
    list names of nodes in partition
    """
    over_time_limit: int | None = None
    """
    job's time limit can be exceeded by this number of minutes before cancellation
    """
    preemption_grace_time: int | None = None
    """
    preemption grace time (seconds)
    """
    preemption_mode: list[str] | None = None
    """
    preemption type
    """
    priority_job_factor: int | None = None
    """
    job priority weight factor
    """
    priority_tier: int | None = None
    """
    tier for scheduling and preemption
    """
    qos: str | None = None
    """
    partition QOS name
    """
    state: str | None = None
    """
    Partition state
    """
    total_cpus: int | None = None
    """
    Total cpus in partition
    """
    total_nodes: int | None = None
    """
    Total number of nodes in partition
    """
    tres: str | None = None
    """
    configured TRES in partition
    """


class PartitionsResponse(BaseModel):
    errors: list[Error] | None = None
    """
    slurm errors
    """
    meta: Meta | None = None
    partitions: list[Partition] | None = None
    """
    partition info
    """


class Ping1(Enum):
    """
    slurm controller host up
    """

    UP = "UP"
    DOWN = "DOWN"


class Ping(BaseModel):
    hostname: str | None = None
    """
    slurm controller hostname
    """
    mode: str | None = None
    """
    slurm controller mode
    """
    ping: Ping1 | None = None
    """
    slurm controller host up
    """
    status: int | None = None
    """
    slurm controller status
    """


class Pings(BaseModel):
    errors: list[Error] | None = None
    """
    slurm errors
    """
    meta: Meta | None = None
    pings: list[Ping] | None = None
    """
    slurm controller pings
    """


class PurgeCompleted(BaseModel):
    """
    If PURGE_COMP flag is set the amount of seconds this reservation will sit idle
    until it is revoked
    """

    time: int | None = None
    """
    amount of seconds this reservation will sit idle until it is revoked
    """


class Reservation1(BaseModel):
    accounts: str | None = None
    """
    Allowed accounts
    """
    burst_buffer: str | None = None
    """
    Reserved burst buffer
    """
    core_count: int | None = None
    """
    Number of reserved cores
    """
    core_spec_cnt: int | None = None
    """
    Number of reserved specialized cores
    """
    end_time: int | None = None
    """
    End time of the reservation
    """
    features: str | None = None
    """
    List of features
    """
    flags: list[str] | None = None
    """
    Reservation options
    """
    groups: str | None = None
    """
    List of groups permitted to use the reserved nodes
    """
    licenses: str | None = None
    """
    List of licenses
    """
    max_start_delay: int | None = None
    """
    Maximum delay in which jobs outside of the reservation will be permitted to
    overlap once any jobs are queued for the reservation
    """
    name: str | None = None
    """
    Reservationn name
    """
    node_count: int | None = None
    """
    Count of nodes reserved
    """
    node_list: str | None = None
    """
    List of reserved nodes
    """
    partition: str | None = None
    """
    Partition
    """
    purge_completed: PurgeCompleted | None = None
    """
    If PURGE_COMP flag is set the amount of seconds this reservation will sit idle
    until it is revoked
    """
    start_time: int | None = None
    """
    Start time of reservation
    """
    tres: str | None = None
    """
    List of TRES
    """
    users: str | None = None
    """
    List of users
    """
    watts: int | None = None
    """
    amount of power to reserve in watts
    """


class ReservationsResponse(BaseModel):
    errors: list[Error] | None = None
    """
    slurm errors
    """
    meta: Meta | None = None
    reservations: list[Reservation1] | None = None
    """
    reservation info
    """


class Signal1(Enum):
    """
    POSIX signal name
    """

    HUP = "HUP"
    INT = "INT"
    QUIT = "QUIT"
    ABRT = "ABRT"
    KILL = "KILL"
    ALRM = "ALRM"
    TERM = "TERM"
    USR1 = "USR1"
    USR2 = "USR2"
    URG = "URG"
    CONT = "CONT"
    STOP = "STOP"
    TSTP = "TSTP"
    TTIN = "TTIN"
    TTOU = "TTOU"


class DbAccount(BaseModel):
    """
    Account description
    """

    associations: list[DbAssociationShortInfo] | None = None
    """
    List of assigned associations
    """
    coordinators: list[DbCoordinatorInfo] | None = None
    """
    List of assigned coordinators
    """
    description: str | None = None
    """
    Description of account
    """
    flags: list[str] | None = None
    """
    List of properties of account
    """
    name: str | None = None
    """
    Name of account
    """
    organization: str | None = None
    """
    Assigned organization of account
    """


class DbAccountInfo(BaseModel):
    accounts: list[DbAccount] | None = None
    """
    List of accounts
    """
    errors: list[DbError] | None = None
    """
    Slurm errors
    """
    meta: Meta | None = None


class DbAccountResponse(BaseModel):
    errors: list[DbError] | None = None
    """
    Slurm errors
    """
    meta: Meta | None = None


class DbAccounting(BaseModel):
    TRES: DbTresList | None = None
    allocated: int | None = None
    """
    total seconds allocated
    """
    id: int | None = None
    """
    association/wckey ID
    """
    start: int | None = None
    """
    UNIX timestamp when accounting period started
    """


class Per2(BaseModel):
    """
    Max TRES minutes per settings
    """

    job: DbTresList | None = None


class Minutes(BaseModel):
    """
    Max TRES minutes settings
    """

    per: Per2 | None = None
    """
    Max TRES minutes per settings
    """
    total: DbTresList | None = None


class Per3(BaseModel):
    """
    Max TRES per settings
    """

    job: DbTresList | None = None
    node: DbTresList | None = None


class Tres(BaseModel):
    """
    Max TRES settings
    """

    minutes: Minutes | None = None
    """
    Max TRES minutes settings
    """
    per: Per3 | None = None
    """
    Max TRES per settings
    """
    total: DbTresList | None = None


class Max(BaseModel):
    """
    Max settings
    """

    jobs: Jobs | None = None
    """
    Max jobs settings
    """
    per: Per1 | None = None
    """
    Max per settings
    """
    tres: Tres | None = None
    """
    Max TRES settings
    """


class DbAssociation(BaseModel):
    """
    Association description
    """

    QOS: list[str] | None = None
    """
    Assigned QOS
    """
    account: str | None = None
    """
    Assigned account
    """
    cluster: str | None = None
    """
    Assigned cluster
    """
    default: Default | None = None
    """
    Default settings
    """
    flags: list[str] | None = None
    """
    List of properties of association
    """
    max: Max | None = None
    """
    Max settings
    """
    min: Min | None = None
    """
    Min settings
    """
    parent_account: str | None = None
    """
    Parent account name
    """
    partition: str | None = None
    """
    Assigned partition
    """
    priority: int | None = None
    """
    Assigned priority
    """
    shares_raw: int | None = None
    """
    Raw fairshare shares
    """
    usage: Usage | None = None
    """
    Association usage
    """
    user: str | None = None
    """
    Assigned user
    """


class DbAssociationsInfo(BaseModel):
    associations: list[DbAssociation] | None = None
    """
    Array of associations
    """
    errors: list[DbError] | None = None
    """
    Slurm errors
    """
    meta: Meta | None = None


class DbConfigResponse(BaseModel):
    errors: list[DbError] | None = None
    """
    Slurm errors
    """
    meta: Meta | None = None


class DbDiag(BaseModel):
    errors: list[DbError] | None = None
    """
    Slurm errors
    """
    meta: Meta | None = None
    statistics: Statistics | None = None


class Tres1(BaseModel):
    """
    TRES settings
    """

    allocated: DbTresList | None = None
    requested: DbTresList | None = None


class Consumed(BaseModel):
    """
    TRES requested for job
    """

    average: DbTresList | None = None
    max: DbTresList | None = None
    min: DbTresList | None = None
    total: DbTresList | None = None


class Requested(BaseModel):
    """
    TRES requested for job
    """

    average: DbTresList | None = None
    max: DbTresList | None = None
    min: DbTresList | None = None
    total: DbTresList | None = None


class Tres2(BaseModel):
    """
    TRES usage
    """

    allocated: DbTresList | None = None
    consumed: Consumed | None = None
    """
    TRES requested for job
    """
    requested: Requested | None = None
    """
    TRES requested for job
    """


class DbJobStep(BaseModel):
    cpu: CPU | None = Field(None, validation_alias="CPU")
    """
    CPU properties
    """
    exit_code: DbJobExitCode | None = None
    kill_request_user: str | None = None
    """
    User who requested job killed
    """
    nodes: Nodes | None = None
    """
    Node details
    """
    pid: str | None = None
    """
    First process PID
    """
    state: str | None = None
    """
    State of job step
    """
    statistics: Statistics1 | None = None
    """
    Statistics of job step
    """
    step: Step | None = None
    """
    Step details
    """
    task: str | None = None
    """
    Task distribution properties
    """
    tasks: Tasks | None = None
    """
    Task properties
    """
    time: Time3 | None = None
    """
    Time properties
    """
    tres: Tres2 | None = None
    """
    TRES usage
    """


class Per6(BaseModel):
    """
    Max TRES minutes per settings
    """

    account: DbTresList | None = None
    job: DbTresList | None = None
    qos: DbTresList | None = None
    user: DbTresList | None = None


class Minutes1(BaseModel):
    """
    Max TRES minutes settings
    """

    per: Per6 | None = None
    """
    Max TRES minutes per settings
    """


class Per7(BaseModel):
    """
    Max TRES per settings
    """

    account: DbTresList | None = None
    job: DbTresList | None = None
    node: DbTresList | None = None
    user: DbTresList | None = None


class Tres3(BaseModel):
    """
    Limits on TRES
    """

    minutes: Minutes1 | None = None
    """
    Max TRES minutes settings
    """
    per: Per7 | None = None
    """
    Max TRES per settings
    """


class Max2(BaseModel):
    """
    Limits on max settings
    """

    accruing: Accruing | None = None
    """
    Limits on accruing priority
    """
    jobs: Jobs1 | None = None
    """
    Limits on jobs settings
    """
    tres: Tres3 | None = None
    """
    Limits on TRES
    """
    wall_clock: WallClock | None = None
    """
    Limit on wallclock settings
    """


class Per9(BaseModel):
    """
    Min tres per settings
    """

    job: DbTresList | None = None


class Tres4(BaseModel):
    """
    Min tres settings
    """

    per: Per9 | None = None
    """
    Min tres per settings
    """


class Min1(BaseModel):
    """
    Min limit settings
    """

    priority_threshold: int | None = None
    """
    Min priority threshold
    """
    tres: Tres4 | None = None
    """
    Min tres settings
    """


class Limits1(BaseModel):
    """
    Assigned limits
    """

    factor: float | None = None
    """
    factor to apply to TRES count for associations using this QOS
    """
    max: Max2 | None = None
    """
    Limits on max settings
    """
    min: Min1 | None = None
    """
    Min limit settings
    """


class DbQos(BaseModel):
    """
    QOS description
    """

    description: str | None = None
    """
    QOS description
    """
    flags: list[str] | None = None
    """
    List of properties of QOS
    """
    id: str | None = None
    """
    Database id
    """
    limits: Limits1 | None = None
    """
    Assigned limits
    """
    name: str | None = None
    """
    Assigned name of QOS
    """
    preempt: Preempt | None = None
    """
    Preemption settings
    """
    priority: int | None = None
    """
    QOS priority
    """
    usage_factor: float | None = None
    """
    Usage factor
    """
    usage_threshold: float | None = None
    """
    Usage threshold
    """


class DbQosInfo(BaseModel):
    errors: list[DbError] | None = None
    """
    Slurm errors
    """
    meta: Meta | None = None
    qos: list[DbQos] | None = None
    """
    Array of QOS
    """


class DbResponseAccountDelete(BaseModel):
    errors: list[DbError] | None = None
    """
    Slurm errors
    """
    meta: Meta | None = None


class DbResponseAssociations(BaseModel):
    errors: list[DbError] | None = None
    """
    Slurm errors
    """
    meta: Meta | None = None


class DbResponseAssociationsDelete(BaseModel):
    errors: list[DbError] | None = None
    """
    Slurm errors
    """
    meta: Meta | None = None
    removed_associations: list[str] | None = None
    """
    the associations
    """


class DbResponseClusterAdd(BaseModel):
    errors: list[DbError] | None = None
    """
    Slurm errors
    """
    meta: Meta | None = None


class DbResponseClusterDelete(BaseModel):
    errors: list[DbError] | None = None
    """
    Slurm errors
    """
    meta: Meta | None = None


class DbResponseQos(BaseModel):
    errors: list[DbError] | None = None
    """
    Slurm errors
    """
    meta: Meta | None = None


class DbResponseQosDelete(BaseModel):
    errors: list[DbError] | None = None
    """
    Slurm errors
    """
    meta: Meta | None = None


class DbResponseTres(BaseModel):
    errors: list[DbError] | None = None
    """
    Slurm errors
    """
    meta: Meta | None = None


class DbResponseUserDelete(BaseModel):
    errors: list[DbError] | None = None
    """
    Slurm errors
    """
    meta: Meta | None = None


class DbResponseUserUpdate(BaseModel):
    errors: list[DbError] | None = None
    """
    Slurm errors
    """
    meta: Meta | None = None


class DbResponseWckeyAdd(BaseModel):
    errors: list[DbError] | None = None
    """
    Slurm errors
    """
    meta: Meta | None = None


class DbResponseWckeyDelete(BaseModel):
    errors: list[DbError] | None = None
    """
    Slurm errors
    """
    meta: Meta | None = None


class DbTresInfo(BaseModel):
    errors: list[DbError] | None = None
    """
    Slurm errors
    """
    meta: Meta | None = None
    tres: DbTresList | None = None


class DbUpdateAccount(BaseModel):
    accounts: list[DbAccount] | None = None


class DbUpdateQos(BaseModel):
    qos: list[DbQos] | None = None


class DbUpdateUsers(BaseModel):
    users: list[DbUser] | None = None


class DbUserInfo(BaseModel):
    errors: list[DbError] | None = None
    """
    Slurm errors
    """
    meta: Meta | None = None
    users: list[DbUser] | None = None
    """
    Array of users
    """


class DbWckey(BaseModel):
    accounting: list[DbAccounting] | None = None
    """
    List of accounting records
    """
    cluster: str | None = None
    """
    Cluster name
    """
    flags: list[str] | None = None
    """
    List of properties of wckey
    """
    id: int | None = None
    """
    wckey database unique id
    """
    name: str | None = None
    """
    wckey name
    """
    user: str | None = None
    """
    wckey user
    """


class DbWckeyInfo(BaseModel):
    errors: list[DbError] | None = None
    """
    Slurm errors
    """
    meta: Meta | None = None
    wckeys: list[DbWckey] | None = None
    """
    List of wckeys
    """


class Statistics2(BaseModel):
    """
    Slurm statistics
    """

    agent_count: int | None = None
    """
    Agent count
    """
    agent_queue_size: int | None = None
    """
    Agent queue size
    """
    agent_thread_count: int | None = None
    """
    Agent thread count
    """
    bf_active: bool | None = None
    """
    Backfill Schedule currently active
    """
    bf_backfilled_het_jobs: int | None = None
    """
    Total backfilled heterogeneous job components
    """
    bf_backfilled_jobs: int | None = None
    """
    Total backfilled jobs (since last slurm start)
    """
    bf_cycle_counter: int | None = None
    """
    Backfill Schedule Total cycles
    """
    bf_cycle_last: int | None = None
    """
    Backfill Schedule Last cycle time
    """
    bf_cycle_max: int | None = None
    """
    Backfill Schedule Max cycle time
    """
    bf_cycle_mean: int | None = None
    """
    Backfill Schedule Mean cycle
    """
    bf_depth_mean: int | None = None
    """
    Backfill Schedule Depth Mean
    """
    bf_depth_mean_try: int | None = None
    """
    Backfill Schedule Depth Mean (try sched)
    """
    bf_last_backfilled_jobs: int | None = None
    """
    Total backfilled jobs (since last stats cycle start)
    """
    bf_last_depth: int | None = None
    """
    Backfill Schedule Last depth cycle
    """
    bf_last_depth_try: int | None = None
    """
    Backfill Schedule Mean cycle (try sched)
    """
    bf_queue_len: int | None = None
    """
    Backfill Schedule Last queue length
    """
    bf_queue_len_mean: int | None = None
    """
    Backfill Schedule Mean queue length
    """
    bf_table_size: int | None = None
    """
    Backfill Schedule Last table size
    """
    bf_table_size_mean: int | None = None
    """
    Backfill Schedule Mean table size
    """
    bf_when_last_cycle: int | None = None
    """
    Last cycle timestamp
    """
    dbd_agent_queue_size: int | None = None
    """
    DBD Agent queue size
    """
    gettimeofday_latency: int | None = None
    """
    Latency for 1000 calls to gettimeofday()
    """
    job_states_ts: int | None = None
    """
    Job states timestamp
    """
    jobs_canceled: int | None = None
    """
    Job cancelled
    """
    jobs_completed: int | None = None
    """
    Job completed
    """
    jobs_failed: int | None = None
    """
    Job failed
    """
    jobs_pending: int | None = None
    """
    Job pending
    """
    jobs_running: int | None = None
    """
    Job running
    """
    jobs_started: int | None = None
    """
    Job started
    """
    jobs_submitted: int | None = None
    """
    Job submitted
    """
    parts_packed: int | None = None
    """
    partition records packed
    """
    req_time: int | None = None
    """
    generation time
    """
    req_time_start: int | None = None
    """
    data since
    """
    rpcs_by_message_type: list[DiagRpcm] | None = None
    """
    Remote Procedure Call statistics by message type
    """
    rpcs_by_user: list[DiagRpcu] | None = None
    """
    Remote Procedure Call statistics by user
    """
    schedule_cycle_last: int | None = None
    """
    Main Schedule last cycle
    """
    schedule_cycle_max: int | None = None
    """
    Main Schedule max cycle
    """
    schedule_cycle_mean: int | None = None
    """
    Average time for Schedule Max cycle
    """
    schedule_cycle_mean_depth: int | None = None
    """
    Average depth for Schedule Max cycle
    """
    schedule_cycle_per_minute: int | None = None
    """
    Main Schedule Cycles per minute
    """
    schedule_cycle_total: int | None = None
    """
    Main Schedule cycle iterations
    """
    schedule_queue_length: int | None = None
    """
    Main Schedule Last queue length
    """
    server_thread_count: int | None = None
    """
    Server thread count
    """


class Diag(BaseModel):
    errors: list[Error] | None = None
    """
    slurm errors
    """
    meta: Meta | None = None
    statistics: Statistics2 | None = None
    """
    Slurm statistics
    """


class JobResources(BaseModel):
    allocated_cpus: int | None = None
    """
    number of assigned job cpus
    """
    allocated_hosts: int | None = None
    """
    number of assigned job hosts
    """
    allocated_nodes: list[NodeAllocation] | None = None
    """
    array of allocated nodes
    """
    nodes: str | None = None
    """
    list of assigned job nodes
    """


class JobResponseProperties(BaseModel):
    account: str | None = None
    """
    Charge resources used by this job to specified account
    """
    accrue_time: int | None = None
    """
    time job is eligible for running
    """
    admin_comment: str | None = None
    """
    administrator's arbitrary comment
    """
    array_job_id: int | None = None
    """
    job_id of a job array or 0 if N/A
    """
    array_max_tasks: int | None = None
    """
    Maximum number of running array tasks
    """
    array_task_id: int | None = None
    """
    task_id of a job array
    """
    array_task_string: str | None = None
    """
    string expression of task IDs in this record
    """
    association_id: int | None = None
    """
    association id for job
    """
    batch_features: str | None = None
    """
    features required for batch script's node
    """
    batch_flag: bool | None = None
    """
    if batch: queued job with script
    """
    batch_host: str | None = None
    """
    name of host running batch script
    """
    billable_tres: float | None = None
    """
    billable TRES
    """
    burst_buffer: str | None = None
    """
    burst buffer specifications
    """
    burst_buffer_state: str | None = None
    """
    burst buffer state info
    """
    cluster: str | None = None
    """
    name of cluster that the job is on
    """
    cluster_features: str | None = None
    """
    comma separated list of required cluster features
    """
    command: str | None = None
    """
    command to be executed
    """
    comment: str | None = None
    """
    arbitrary comment
    """
    container: str | None = None
    """
    absolute path to OCI container bundle
    """
    contiguous: bool | None = None
    """
    job requires contiguous nodes
    """
    core_spec: str | None = None
    """
    specialized core count
    """
    cores_per_socket: str | None = None
    """
    cores per socket required by job
    """
    cpu_frequency_governor: str | None = None
    """
    cpu frequency governor
    """
    cpu_frequency_maximum: str | None = None
    """
    Maximum cpu frequency
    """
    cpu_frequency_minimum: str | None = None
    """
    Minimum cpu frequency
    """
    cpus: int | None = None
    """
    minimum number of cpus required by job
    """
    cpus_per_task: str | None = None
    """
    number of processors required for each task
    """
    cpus_per_tres: str | None = None
    """
    semicolon delimited list of TRES=# values
    """
    current_working_directory: str | None = None
    """
    pathname of working directory
    """
    deadline: int | None = None
    """
    job start deadline 
    """
    delay_boot: int | None = None
    """
    command to be executed
    """
    dependency: str | None = None
    """
    synchronize job execution with other jobs
    """
    derived_exit_code: int | None = None
    """
    highest exit code of all job steps
    """
    eligible_time: int | None = None
    """
    time job is eligible for running
    """
    end_time: int | None = None
    """
    time of termination, actual or expected
    """
    excluded_nodes: str | None = None
    """
    comma separated list of excluded nodes
    """
    exit_code: int | None = None
    """
    exit code for job
    """
    features: str | None = None
    """
    comma separated list of required features
    """
    federation_origin: str | None = None
    """
    Origin cluster's name
    """
    federation_siblings_active: str | None = None
    """
    string of active sibling names
    """
    federation_siblings_viable: str | None = None
    """
    string of viable sibling names
    """
    flags: list[str] | None = None
    """
    Job flags
    """
    gres_detail: list[str] | None = None
    """
    Job flags
    """
    group_id: int | None = None
    """
    group job submitted as
    """
    het_job_id: int | None = None
    """
    job ID of hetjob leader
    """
    het_job_id_set: str | None = None
    """
    job IDs for all components
    """
    het_job_offset: int | None = None
    """
    HetJob component offset from leader
    """
    job_id: int | None = None
    """
    job ID
    """
    job_resources: JobResources | None = None
    job_state: str | None = None
    """
    state of the job
    """
    last_sched_evaluation: int | None = None
    """
    last time job was evaluated for scheduling
    """
    licenses: str | None = None
    """
    licenses required by the job
    """
    max_cpus: int | None = None
    """
    maximum number of cpus usable by job
    """
    max_nodes: int | None = None
    """
    maximum number of nodes usable by job
    """
    mcs_label: str | None = None
    """
    mcs_label if mcs plugin in use
    """
    memory_per_cpu: int | None = None
    """
    minimum real memory per cpu
    """
    memory_per_node: int | None = None
    """
    minimum real memory per node
    """
    memory_per_tres: str | None = None
    """
    semicolon delimited list of TRES=# values
    """
    minimum_cpus_per_node: int | None = None
    """
    minimum # CPUs per node
    """
    minimum_tmp_disk_per_node: int | None = None
    """
    minimum tmp disk per node
    """
    name: str | None = None
    """
    name of the job
    """
    nice: int | None = None
    """
    requested priority change
    """
    node_count: int | None = None
    """
    minimum number of nodes required by job
    """
    nodes: str | None = None
    """
    list of nodes allocated to job
    """
    partition: str | None = None
    """
    name of assigned partition
    """
    pre_sus_time: int | None = None
    """
    time job ran prior to last suspend
    """
    preempt_time: int | None = None
    """
    preemption signal time
    """
    priority: int | None = None
    """
    relative priority of the job
    """
    profile: list[str] | None = None
    """
    Job profiling requested
    """
    qos: str | None = None
    """
    Quality of Service
    """
    reboot: bool | None = None
    """
    node reboot requested before start
    """
    requeue: bool | None = None
    """
    enable or disable job requeue option
    """
    required_nodes: str | None = None
    """
    comma separated list of required nodes
    """
    resize_time: int | None = None
    """
    time of latest size change
    """
    restart_cnt: int | None = None
    """
    count of job restarts
    """
    resv_name: str | None = None
    """
    reservation name
    """
    shared: str | None = None
    """
    type and if job can share nodes with other jobs
    """
    show_flags: list[str] | None = None
    """
    details requested
    """
    sockets_per_board: int | None = None
    """
    sockets per board required by job
    """
    sockets_per_node: int | None = None
    """
    sockets per node required by job
    """
    standard_error: str | None = None
    """
    pathname of job's stderr file
    """
    standard_input: str | None = None
    """
    pathname of job's stdin file
    """
    standard_output: str | None = None
    """
    pathname of job's stdout file
    """
    start_time: int | None = None
    """
    time execution begins, actual or expected
    """
    state_description: str | None = None
    """
    optional details for state_reason
    """
    state_reason: str | None = None
    """
    reason job still pending or failed
    """
    submit_time: int | None = None
    """
    time of job submission
    """
    suspend_time: int | None = None
    """
    time job last suspended or resumed
    """
    system_comment: str | None = None
    """
    slurmctld's arbitrary comment
    """
    tasks: int | None = None
    """
    requested task count
    """
    tasks_per_board: int | None = None
    """
    number of tasks to invoke on each board
    """
    tasks_per_core: int | None = None
    """
    number of tasks to invoke on each core
    """
    tasks_per_socket: int | None = None
    """
    number of tasks to invoke on each socket
    """
    thread_spec: str | None = None
    """
    specialized thread count
    """
    threads_per_core: int | None = None
    """
    threads per core required by job
    """
    time_limit: int | None = None
    """
    maximum run time in minutes
    """
    time_minimum: int | None = None
    """
    minimum run time in minutes
    """
    tres_alloc_str: str | None = None
    """
    tres used in the job
    """
    tres_bind: str | None = None
    """
    Task to TRES binding directives
    """
    tres_freq: str | None = None
    """
    TRES frequency directives
    """
    tres_per_job: str | None = None
    """
    semicolon delimited list of TRES=# values
    """
    tres_per_node: str | None = None
    """
    semicolon delimited list of TRES=# values
    """
    tres_per_socket: str | None = None
    """
    semicolon delimited list of TRES=# values
    """
    tres_per_task: str | None = None
    """
    semicolon delimited list of TRES=# values
    """
    tres_req_str: str | None = None
    """
    tres reqeusted in the job
    """
    user_id: int | None = None
    """
    user id the job runs as
    """
    user_name: str | None = None
    """
    user the job runs as
    """
    wckey: str | None = None
    """
    wckey for job
    """


class JobSubmissionResponse(BaseModel):
    errors: list[Error] | None = None
    """
    slurm errors
    """
    job_id: int | None = None
    """
    new job ID
    """
    job_submit_user_msg: str | None = None
    """
    Message to user from job_submit plugin
    """
    meta: Meta | None = None
    step_id: str | None = None
    """
    new job step ID
    """


class JobsResponse(BaseModel):
    errors: list[Error] | None = None
    """
    slurm errors
    """
    jobs: list[JobResponseProperties] | None = None
    """
    job descriptions
    """
    meta: Meta | None = None


class DbClusterInfo(BaseModel):
    associations: Associations | None = None
    """
    Information about associations
    """
    controller: Controller | None = None
    """
    Information about controller
    """
    flags: list[str] | None = None
    """
    List of properties of cluster
    """
    name: str | None = None
    """
    Cluster name
    """
    nodes: str | None = None
    """
    Assigned nodes
    """
    rpc_version: int | None = None
    """
    Number rpc version
    """
    select_plugin: str | None = None
    """
    Configured select plugin
    """
    tres: list[DbResponseTres] | None = None
    """
    List of TRES in cluster
    """


class DbClustersProperties(BaseModel):
    clusters: DbClusterInfo | None = None


class DbConfigInfo(BaseModel):
    accounts: list[DbAccount] | None = None
    """
    Array of accounts
    """
    associations: list[DbAssociation] | None = None
    """
    Array of associations
    """
    errors: list[DbError] | None = None
    """
    Slurm errors
    """
    meta: Meta | None = None
    qos: list[DbQos] | None = None
    """
    Array of qos
    """
    tres: list[DbTresList] | None = None
    """
    Array of TRES
    """
    users: list[DbUser] | None = None
    """
    Array of users
    """
    wckeys: list[DbWckey] | None = None
    """
    Array of wckeys
    """


class DbJob(BaseModel):
    """
    Single job description
    """

    account: str | None = None
    """
    Account charged by job
    """
    allocation_nodes: str | None = None
    """
    Nodes allocated to job
    """
    array: Array | None = None
    """
    Array properties (optional)
    """
    association: DbAssociationShortInfo | None = None
    cluster: str | None = None
    """
    Assigned cluster
    """
    comment: Comment | None = None
    """
    Job comments by type
    """
    constraints: str | None = None
    """
    Constraints on job
    """
    container: str | None = None
    """
    absolute path to OCI container bundle
    """
    derived_exit_code: DbJobExitCode | None = None
    exit_code: DbJobExitCode | None = None
    flags: list[str] | None = None
    """
    List of properties of job
    """
    group: str | None = None
    """
    User's group to run job
    """
    het: Het | None = None
    """
    Heterogeneous Job details (optional)
    """
    job_id: int | None = None
    """
    Job id
    """
    kill_request_user: str | None = None
    """
    User who requested job killed
    """
    mcs: Mcs | None = None
    """
    Multi-Category Security
    """
    name: str | None = None
    """
    Assigned job name
    """
    nodes: str | None = None
    """
    List of nodes allocated for job
    """
    partition: str | None = None
    """
    Assigned job's partition
    """
    priority: int | None = None
    """
    Priority
    """
    qos: str | None = None
    """
    Assigned qos name
    """
    required: Required | None = None
    """
    Job run requirements
    """
    reservation: Reservation | None = None
    """
    Reservation usage details
    """
    state: State | None = None
    """
    State properties of job
    """
    steps: list[DbJobStep] | None = None
    """
    Job step description
    """
    time: Time2 | None = None
    """
    Time properties
    """
    tres: Tres1 | None = None
    """
    TRES settings
    """
    user: str | None = None
    """
    Job user
    """
    wckey: Wckey | None = None
    """
    Job assigned wckey details
    """
    working_directory: str | None = None
    """
    Directory where job was initially started
    """


class DbJobInfo(BaseModel):
    errors: list[DbError] | None = None
    """
    Slurm errors
    """
    jobs: list[DbJob] | None = None
    """
    Array of jobs
    """
    meta: Meta | None = None


class DbSetConfig(BaseModel):
    TRES: list[DbTresList] | None = None
    accounts: list[DbUpdateAccount] | None = None
    associations: list[DbAssociation] | None = None
    clusters: list[DbClustersProperties] | None = None
    qos: list[DbQos] | None = None
    users: list[DbUser] | None = None
    wckeys: list[DbWckey] | None = None
