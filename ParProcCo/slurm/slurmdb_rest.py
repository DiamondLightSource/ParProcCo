# generated by datamodel-codegen:
#   filename:  slurmdb-rest.yaml
#   timestamp: 2025-03-20T16:17:44+00:00

from __future__ import annotations

from enum import Enum
from typing import Any

from pydantic import BaseModel, Field, RootModel


class AccountFlag(Enum):
    DELETED = "DELETED"
    WithAssociations = "WithAssociations"
    WithCoordinators = "WithCoordinators"
    NoUsersAreCoords = "NoUsersAreCoords"
    UsersAreCoords = "UsersAreCoords"


class AccountFlags(RootModel[list[AccountFlag]]):
    root: list[AccountFlag]


class AccountShort(BaseModel):
    description: str | None = None
    """
    Arbitrary string describing the account
    """
    organization: str | None = None
    """
    Organization to which the account belongs
    """


class Allocated(BaseModel):
    seconds: int | None = None
    """
    Number of seconds allocated
    """


class AcctGatherProfileEnum(Enum):
    NOT_SET = "NOT_SET"
    NONE = "NONE"
    ENERGY = "ENERGY"
    LUSTRE = "LUSTRE"
    NETWORK = "NETWORK"
    TASK = "TASK"


class AcctGatherProfile(RootModel[list[AcctGatherProfileEnum]]):
    root: list[AcctGatherProfileEnum]


class AdminLvlEnum(Enum):
    Not_Set = "Not Set"
    None_ = "None"
    Operator = "Operator"
    Administrator = "Administrator"


class AdminLvl(RootModel[list[AdminLvlEnum]]):
    root: list[AdminLvlEnum]


class Default(BaseModel):
    qos: str | None = None
    """
    Default QOS
    """


class AssocFlag(Enum):
    DELETED = "DELETED"
    NoUpdate = "NoUpdate"
    Exact = "Exact"
    NoUsersAreCoords = "NoUsersAreCoords"
    UsersAreCoords = "UsersAreCoords"


class AssocFlags(RootModel[list[AssocFlag]]):
    root: list[AssocFlag]


class AssocSharesObjWrapTypeEnum(Enum):
    USER = "USER"
    ASSOCIATION = "ASSOCIATION"


class AssocSharesObjWrapType(RootModel[list[AssocSharesObjWrapTypeEnum]]):
    root: list[AssocSharesObjWrapTypeEnum]


class AssocShort(BaseModel):
    account: str | None = None
    """
    Account name
    """
    cluster: str | None = None
    """
    Cluster name
    """
    id: int | None = None
    """
    Numeric association ID
    """
    partition: str | None = None
    """
    Partition name
    """
    user: str
    """
    User name
    """


class AssocShortList(RootModel[list[AssocShort]]):
    root: list[AssocShort]


class BfExitFields(BaseModel):
    bf_max_job_start: int | None = None
    """
    Reached number of jobs allowed to start
    """
    bf_max_job_test: int | None = None
    """
    Reached number of jobs allowed to be tested
    """
    bf_max_time: int | None = None
    """
    Reached maximum allowed scheduler time
    """
    bf_node_space_size: int | None = None
    """
    Reached table size limit
    """
    end_job_queue: int | None = None
    """
    Reached end of queue
    """
    state_changed: int | None = None
    """
    System state changed
    """


class Associations(BaseModel):
    root: AssocShort | None = None
    """
    Root association information
    """


class Controller(BaseModel):
    host: str | None = None
    """
    ControlHost
    """
    port: int | None = None
    """
    ControlPort
    """


class ClusterRecFlag(Enum):
    REGISTERING = "REGISTERING"
    MULTIPLE_SLURMD = "MULTIPLE_SLURMD"
    FRONT_END = "FRONT_END"
    FEDERATION = "FEDERATION"
    EXTERNAL = "EXTERNAL"


class ClusterRecFlags(RootModel[list[ClusterRecFlag]]):
    root: list[ClusterRecFlag]


class ControllerPing(BaseModel):
    hostname: str | None = None
    """
    Target for ping
    """
    latency: int | None = None
    """
    Number of microseconds it took to successfully ping or timeout
    """
    mode: str | None = None
    """
    The operating mode of the responding slurmctld
    """
    pinged: str | None = None
    """
    Ping result
    """
    primary: bool
    """
    Is responding slurmctld the primary controller
    """
    responding: bool
    """
    If ping RPC responded with pong from controller
    """


class ControllerPingArray(RootModel[list[ControllerPing]]):
    root: list[ControllerPing]


class Coord(BaseModel):
    direct: bool | None = None
    """
    Indicates whether the coordinator was directly assigned to this account
    """
    name: str
    """
    User name
    """


class CoordList(RootModel[list[Coord]]):
    root: list[Coord]


class CpuBindingFlag(Enum):
    CPU_BIND_TO_THREADS = "CPU_BIND_TO_THREADS"
    CPU_BIND_TO_CORES = "CPU_BIND_TO_CORES"
    CPU_BIND_TO_SOCKETS = "CPU_BIND_TO_SOCKETS"
    CPU_BIND_TO_LDOMS = "CPU_BIND_TO_LDOMS"
    CPU_BIND_NONE = "CPU_BIND_NONE"
    CPU_BIND_RANK = "CPU_BIND_RANK"
    CPU_BIND_MAP = "CPU_BIND_MAP"
    CPU_BIND_MASK = "CPU_BIND_MASK"
    CPU_BIND_LDRANK = "CPU_BIND_LDRANK"
    CPU_BIND_LDMAP = "CPU_BIND_LDMAP"
    CPU_BIND_LDMASK = "CPU_BIND_LDMASK"
    VERBOSE = "VERBOSE"
    CPU_BIND_ONE_THREAD_PER_CORE = "CPU_BIND_ONE_THREAD_PER_CORE"


class CpuBindingFlags(RootModel[list[CpuBindingFlag]]):
    root: list[CpuBindingFlag]


class CrTypeEnum(Enum):
    CPU = "CPU"
    SOCKET = "SOCKET"
    CORE = "CORE"
    BOARD = "BOARD"
    MEMORY = "MEMORY"
    ONE_TASK_PER_CORE = "ONE_TASK_PER_CORE"
    PACK_NODES = "PACK_NODES"
    CORE_DEFAULT_DIST_BLOCK = "CORE_DEFAULT_DIST_BLOCK"
    LLN = "LLN"
    LINEAR = "LINEAR"


class CrType(RootModel[list[CrTypeEnum]]):
    root: list[CrTypeEnum]


class Line(BaseModel):
    end: int | None = None
    """
    End of this entry in file
    """
    start: int | None = None
    """
    Start of this entry in file
    """


class CronEntryFlag(Enum):
    WILD_MINUTE = "WILD_MINUTE"
    WILD_HOUR = "WILD_HOUR"
    WILD_DAY_OF_MONTH = "WILD_DAY_OF_MONTH"
    WILD_MONTH = "WILD_MONTH"
    WILD_DAY_OF_WEEK = "WILD_DAY_OF_WEEK"


class CronEntryFlags(RootModel[list[CronEntryFlag]]):
    root: list[CronEntryFlag]


class CsvString(RootModel[list[str]]):
    root: list[str]


class Float64NoValStruct(BaseModel):
    infinite: bool | None = None
    """
    True if number has been set to infinite; "set" and "number" will be ignored
    """
    number: float | None = None
    """
    If "set" is True the number will be set with value; otherwise ignore number contents
    """
    set: bool | None = None
    """
    True if number has been set; False if number is unset
    """


class Hostlist(RootModel[list[str]]):
    root: list[str]


class HostlistString(RootModel[list[str]]):
    root: list[str]


class Time(BaseModel):
    time_end: int | None = None
    """
    When the instance will end (UNIX timestamp)
    """
    time_start: int | None = None
    """
    When the instance will start (UNIX timestamp)
    """


class Instance(BaseModel):
    cluster: str | None = None
    """
    Cluster name
    """
    extra: str | None = None
    """
    Arbitrary string used for node filtering if extra constraints are enabled
    """
    instance_id: str | None = None
    """
    Cloud instance ID
    """
    instance_type: str | None = None
    """
    Cloud instance type
    """
    node_name: str | None = None
    """
    NodeName
    """
    time: Time | None = None


class InstanceList(RootModel[list[Instance]]):
    root: list[Instance]


class Running(BaseModel):
    tasks: int | None = None
    """
    Maximum number of simultaneously running tasks, 0 if no limit
    """


class Max1(BaseModel):
    running: Running | None = None


class Limits(BaseModel):
    max: Max1 | None = None


class Comment(BaseModel):
    administrator: str | None = None
    """
    Arbitrary comment made by administrator
    """
    job: str | None = None
    """
    Arbitrary comment made by user
    """
    system: str | None = None
    """
    Arbitrary comment from slurmctld
    """


class Mcs(BaseModel):
    label: str | None = None
    """
    Multi-Category Security label on the job
    """


class Reservation(BaseModel):
    id: int | None = None
    """
    Unique identifier of requested reservation
    """
    name: str | None = None
    """
    Name of reservation to use
    """


class System(BaseModel):
    microseconds: int | None = None
    """
    System CPU time used by the job in microseconds
    """
    seconds: int | None = None
    """
    System CPU time used by the job in seconds
    """


class Total(BaseModel):
    microseconds: int | None = None
    """
    Sum of System and User CPU time used by the job in microseconds
    """
    seconds: int | None = None
    """
    Sum of System and User CPU time used by the job in seconds
    """


class User(BaseModel):
    microseconds: int | None = None
    """
    User CPU time used by the job in microseconds
    """
    seconds: int | None = None
    """
    User CPU time used by the job in seconds
    """


class JobArrayResponseMsgEntry(BaseModel):
    error: str | None = None
    """
    Verbose update status or error
    """
    error_code: int | None = None
    """
    Verbose update status or error
    """
    job_id: int | None = None
    """
    Job ID for updated job
    """
    step_id: str | None = None
    """
    Step ID for updated job
    """
    why: str | None = None
    """
    Update response message
    """


class JobFlag(Enum):
    KILL_INVALID_DEPENDENCY = "KILL_INVALID_DEPENDENCY"
    NO_KILL_INVALID_DEPENDENCY = "NO_KILL_INVALID_DEPENDENCY"
    HAS_STATE_DIRECTORY = "HAS_STATE_DIRECTORY"
    TESTING_BACKFILL = "TESTING_BACKFILL"
    GRES_BINDING_ENFORCED = "GRES_BINDING_ENFORCED"
    TEST_NOW_ONLY = "TEST_NOW_ONLY"
    SEND_JOB_ENVIRONMENT = "SEND_JOB_ENVIRONMENT"
    SPREAD_JOB = "SPREAD_JOB"
    PREFER_MINIMUM_NODE_COUNT = "PREFER_MINIMUM_NODE_COUNT"
    JOB_KILL_HURRY = "JOB_KILL_HURRY"
    SKIP_TRES_STRING_ACCOUNTING = "SKIP_TRES_STRING_ACCOUNTING"
    SIBLING_CLUSTER_UPDATE_ONLY = "SIBLING_CLUSTER_UPDATE_ONLY"
    HETEROGENEOUS_JOB = "HETEROGENEOUS_JOB"
    EXACT_TASK_COUNT_REQUESTED = "EXACT_TASK_COUNT_REQUESTED"
    EXACT_CPU_COUNT_REQUESTED = "EXACT_CPU_COUNT_REQUESTED"
    TESTING_WHOLE_NODE_BACKFILL = "TESTING_WHOLE_NODE_BACKFILL"
    TOP_PRIORITY_JOB = "TOP_PRIORITY_JOB"
    ACCRUE_COUNT_CLEARED = "ACCRUE_COUNT_CLEARED"
    GRES_BINDING_DISABLED = "GRES_BINDING_DISABLED"
    JOB_WAS_RUNNING = "JOB_WAS_RUNNING"
    JOB_ACCRUE_TIME_RESET = "JOB_ACCRUE_TIME_RESET"
    CRON_JOB = "CRON_JOB"
    EXACT_MEMORY_REQUESTED = "EXACT_MEMORY_REQUESTED"
    USING_DEFAULT_ACCOUNT = "USING_DEFAULT_ACCOUNT"
    USING_DEFAULT_PARTITION = "USING_DEFAULT_PARTITION"
    USING_DEFAULT_QOS = "USING_DEFAULT_QOS"
    USING_DEFAULT_WCKEY = "USING_DEFAULT_WCKEY"
    DEPENDENT = "DEPENDENT"
    MAGNETIC = "MAGNETIC"
    PARTITION_ASSIGNED = "PARTITION_ASSIGNED"
    BACKFILL_ATTEMPTED = "BACKFILL_ATTEMPTED"
    SCHEDULING_ATTEMPTED = "SCHEDULING_ATTEMPTED"
    STEPMGR_ENABLED = "STEPMGR_ENABLED"


class JobFlags(RootModel[list[JobFlag]]):
    root: list[JobFlag]


class Power(BaseModel):
    flags: list | None = None


class JobInfoGresDetail(RootModel[list[str]]):
    root: list[str]


class JobMailFlag(Enum):
    BEGIN = "BEGIN"
    END = "END"
    FAIL = "FAIL"
    REQUEUE = "REQUEUE"
    TIME_100_ = "TIME=100%"
    TIME_90_ = "TIME=90%"
    TIME_80_ = "TIME=80%"
    TIME_50_ = "TIME=50%"
    STAGE_OUT = "STAGE_OUT"
    ARRAY_TASKS = "ARRAY_TASKS"
    INVALID_DEPENDENCY = "INVALID_DEPENDENCY"


class JobMailFlags(RootModel[list[JobMailFlag]]):
    root: list[JobMailFlag]


class JobResCoreStatu(Enum):
    INVALID = "INVALID"
    UNALLOCATED = "UNALLOCATED"
    ALLOCATED = "ALLOCATED"
    IN_USE = "IN_USE"


class JobResCoreStatus(RootModel[list[JobResCoreStatu]]):
    root: list[JobResCoreStatu]


class Cpus(BaseModel):
    count: int | None = None
    """
    Total number of CPUs assigned to job
    """
    used: int | None = None
    """
    Total number of CPUs used by job
    """


class Memory(BaseModel):
    allocated: int | None = None
    """
    Total memory (MiB) allocated to job
    """
    used: int | None = None
    """
    Total memory (MiB) used by job
    """


class JobSharedEnum(Enum):
    none = "none"
    oversubscribe = "oversubscribe"
    user = "user"
    mcs = "mcs"
    topo = "topo"


class JobShared(RootModel[list[JobSharedEnum]]):
    root: list[JobSharedEnum]


class JobStateEnum(Enum):
    PENDING = "PENDING"
    RUNNING = "RUNNING"
    SUSPENDED = "SUSPENDED"
    COMPLETED = "COMPLETED"
    CANCELLED = "CANCELLED"
    FAILED = "FAILED"
    TIMEOUT = "TIMEOUT"
    NODE_FAIL = "NODE_FAIL"
    PREEMPTED = "PREEMPTED"
    BOOT_FAIL = "BOOT_FAIL"
    DEADLINE = "DEADLINE"
    OUT_OF_MEMORY = "OUT_OF_MEMORY"
    LAUNCH_FAILED = "LAUNCH_FAILED"
    REQUEUED = "REQUEUED"
    REQUEUE_HOLD = "REQUEUE_HOLD"
    SPECIAL_EXIT = "SPECIAL_EXIT"
    RESIZING = "RESIZING"
    CONFIGURING = "CONFIGURING"
    COMPLETING = "COMPLETING"
    STOPPED = "STOPPED"
    RECONFIG_FAIL = "RECONFIG_FAIL"
    POWER_UP_NODE = "POWER_UP_NODE"
    REVOKED = "REVOKED"
    REQUEUE_FED = "REQUEUE_FED"
    RESV_DEL_HOLD = "RESV_DEL_HOLD"
    SIGNALING = "SIGNALING"
    STAGE_OUT = "STAGE_OUT"


class JobState(RootModel[list[JobStateEnum]]):
    root: list[JobStateEnum]


class KillJobsMsgJobsArray(RootModel[list[str]]):
    root: list[str]


class Error(BaseModel):
    code: int | None = None
    """
    Numeric error encountered signaling job
    """
    message: str | None = None
    """
    Error message why signaling job failed
    """
    string: str | None = None
    """
    String error encountered signaling job
    """


class Federation(BaseModel):
    sibling: str | None = None
    """
    Name of federation sibling (may be empty for non-federation)
    """


class License(BaseModel):
    Free: int | None = None
    """
    Number of licenses currently available
    """
    LastConsumed: int | None = None
    """
    Last known number of licenses that were consumed in the license manager (Remote Only)
    """
    LastDeficit: int | None = None
    """
    Number of "missing licenses" from the cluster's perspective
    """
    LastUpdate: int | None = None
    """
    When the license information was last updated (UNIX Timestamp)
    """
    LicenseName: str | None = None
    """
    Name of the license
    """
    Remote: bool | None = None
    """
    Indicates whether licenses are served by the database
    """
    Reserved: int | None = None
    """
    Number of licenses reserved
    """
    Total: int | None = None
    """
    Total number of licenses present
    """
    Used: int | None = None
    """
    Number of licenses in use
    """


class Licenses(RootModel[list[License]]):
    root: list[License]


class MemoryBindingTypeEnum(Enum):
    NONE = "NONE"
    RANK = "RANK"
    MAP = "MAP"
    MASK = "MASK"
    LOCAL = "LOCAL"
    VERBOSE = "VERBOSE"
    SORT = "SORT"
    PREFER = "PREFER"


class MemoryBindingType(RootModel[list[MemoryBindingTypeEnum]]):
    root: list[MemoryBindingTypeEnum]


class NodeCrTypeEnum(Enum):
    AVAILABLE = "AVAILABLE"
    ONE_ROW = "ONE_ROW"
    RESERVED = "RESERVED"


class NodeCrType(RootModel[list[NodeCrTypeEnum]]):
    root: list[NodeCrTypeEnum]


class NodeState(Enum):
    INVALID = "INVALID"
    UNKNOWN = "UNKNOWN"
    DOWN = "DOWN"
    IDLE = "IDLE"
    ALLOCATED = "ALLOCATED"
    ERROR = "ERROR"
    MIXED = "MIXED"
    FUTURE = "FUTURE"
    RESERVED = "RESERVED"
    UNDRAIN = "UNDRAIN"
    CLOUD = "CLOUD"
    RESUME = "RESUME"
    DRAIN = "DRAIN"
    COMPLETING = "COMPLETING"
    NOT_RESPONDING = "NOT_RESPONDING"
    POWERED_DOWN = "POWERED_DOWN"
    FAIL = "FAIL"
    POWERING_UP = "POWERING_UP"
    MAINTENANCE = "MAINTENANCE"
    REBOOT_REQUESTED = "REBOOT_REQUESTED"
    REBOOT_CANCELED = "REBOOT_CANCELED"
    POWERING_DOWN = "POWERING_DOWN"
    DYNAMIC_FUTURE = "DYNAMIC_FUTURE"
    REBOOT_ISSUED = "REBOOT_ISSUED"
    PLANNED = "PLANNED"
    INVALID_REG = "INVALID_REG"
    POWER_DOWN = "POWER_DOWN"
    POWER_UP = "POWER_UP"
    POWER_DRAIN = "POWER_DRAIN"
    DYNAMIC_NORM = "DYNAMIC_NORM"


class NodeStates(RootModel[list[NodeState]]):
    root: list[NodeState]


class OpenModeEnum(Enum):
    APPEND = "APPEND"
    TRUNCATE = "TRUNCATE"


class OpenMode(RootModel[list[OpenModeEnum]]):
    root: list[OpenModeEnum]


class OpenapiError(BaseModel):
    description: str | None = None
    """
    Long form error description
    """
    error: str | None = None
    """
    Short form error description
    """
    error_number: int | None = None
    """
    Slurm numeric error identifier
    """
    source: str | None = None
    """
    Source of error or where error was first detected
    """


class OpenapiErrors(RootModel[list[OpenapiError]]):
    root: list[OpenapiError]


class Client(BaseModel):
    group: str | None = None
    """
    Client group (if known)
    """
    source: str | None = None
    """
    Client source description
    """
    user: str | None = None
    """
    Client user (if known)
    """


class Plugin(BaseModel):
    accounting_storage: str | None = None
    """
    Slurm accounting plugin
    """
    data_parser: str | None = None
    """
    Slurm data_parser plugin
    """
    name: str | None = None
    """
    Slurm plugin name (if applicable)
    """
    type: str | None = None
    """
    Slurm plugin type (if applicable)
    """


class Version(BaseModel):
    major: str | None = None
    """
    Slurm release major version
    """
    micro: str | None = None
    """
    Slurm release micro version
    """
    minor: str | None = None
    """
    Slurm release minor version
    """


class Slurm(BaseModel):
    cluster: str | None = None
    """
    Slurm cluster name
    """
    release: str | None = None
    """
    Slurm release string
    """
    version: Version | None = None


class OpenapiWarning(BaseModel):
    description: str | None = None
    """
    Long form warning description
    """
    source: str | None = None
    """
    Source of warning or where warning was first detected
    """


class OpenapiWarnings(RootModel[list[OpenapiWarning]]):
    root: list[OpenapiWarning]


class OversubscribeFlag(Enum):
    force = "force"


class OversubscribeFlags(RootModel[list[OversubscribeFlag]]):
    root: list[OversubscribeFlag]


class PartPrio(BaseModel):
    partition: str | None = None
    """
    Partition name
    """
    priority: int | None = None
    """
    Prospective job priority if it runs in this partition
    """


class Accounts(BaseModel):
    allowed: str | None = None
    """
    AllowAccounts
    """
    deny: str | None = None
    """
    DenyAccounts
    """


class Cpus1(BaseModel):
    task_binding: int | None = None
    """
    CpuBind
    """
    total: int | None = None
    """
    TotalCPUs
    """


class Groups(BaseModel):
    allowed: str | None = None
    """
    AllowGroups
    """


class Oversubscribe(BaseModel):
    flags: OversubscribeFlags | None = None
    """
    Flags applicable to the OverSubscribe setting
    """
    jobs: int | None = None
    """
    Maximum number of jobs allowed to oversubscribe resources
    """


class Minimums(BaseModel):
    nodes: int | None = None
    """
    MinNodes
    """


class Nodes2(BaseModel):
    allowed_allocation: str | None = None
    """
    AllocNodes
    """
    configured: str | None = None
    """
    Nodes
    """
    total: int | None = None
    """
    TotalNodes
    """


class Priority(BaseModel):
    job_factor: int | None = None
    """
    PriorityJobFactor
    """
    tier: int | None = None
    """
    PriorityTier
    """


class Qos(BaseModel):
    allowed: str | None = None
    """
    AllowQOS
    """
    assigned: str | None = None
    """
    QOS
    """
    deny: str | None = None
    """
    DenyQOS
    """


class Tres4(BaseModel):
    billing_weights: str | None = None
    """
    TRESBillingWeights
    """
    configured: str | None = None
    """
    TRES
    """


class PartitionState(Enum):
    INACTIVE = "INACTIVE"
    UNKNOWN = "UNKNOWN"
    UP = "UP"
    DOWN = "DOWN"
    DRAIN = "DRAIN"


class PartitionStates(RootModel[list[PartitionState]]):
    root: list[PartitionState]


class PriorityByPartition(RootModel[list[PartPrio]]):
    root: list[PartPrio]


class ProcessExitCodeStatu(Enum):
    INVALID = "INVALID"
    PENDING = "PENDING"
    SUCCESS = "SUCCESS"
    ERROR = "ERROR"
    SIGNALED = "SIGNALED"
    CORE_DUMPED = "CORE_DUMPED"


class ProcessExitCodeStatus(RootModel[list[ProcessExitCodeStatu]]):
    root: list[ProcessExitCodeStatu]


class QosFlag(Enum):
    NOT_SET = "NOT_SET"
    ADD = "ADD"
    REMOVE = "REMOVE"
    PARTITION_MINIMUM_NODE = "PARTITION_MINIMUM_NODE"
    PARTITION_MAXIMUM_NODE = "PARTITION_MAXIMUM_NODE"
    PARTITION_TIME_LIMIT = "PARTITION_TIME_LIMIT"
    ENFORCE_USAGE_THRESHOLD = "ENFORCE_USAGE_THRESHOLD"
    NO_RESERVE = "NO_RESERVE"
    REQUIRED_RESERVATION = "REQUIRED_RESERVATION"
    DENY_LIMIT = "DENY_LIMIT"
    OVERRIDE_PARTITION_QOS = "OVERRIDE_PARTITION_QOS"
    NO_DECAY = "NO_DECAY"
    USAGE_FACTOR_SAFE = "USAGE_FACTOR_SAFE"
    RELATIVE = "RELATIVE"


class QosFlags(RootModel[list[QosFlag]]):
    root: list[QosFlag]


class QosPreemptList(RootModel[list[str]]):
    root: list[str]


class QosPreemptMode(Enum):
    DISABLED = "DISABLED"
    SUSPEND = "SUSPEND"
    REQUEUE = "REQUEUE"
    CANCEL = "CANCEL"
    GANG = "GANG"


class QosPreemptModes(RootModel[list[QosPreemptMode]]):
    root: list[QosPreemptMode]


class QosStringIdList(RootModel[list[str]]):
    """
    List of QOS names
    """

    root: list[str]
    """
    List of QOS names
    """


class ReservationCoreSpec(BaseModel):
    core: str | None = None
    """
    IDs of reserved cores
    """
    node: str | None = None
    """
    Name of reserved node
    """


class ReservationFlag(Enum):
    MAINT = "MAINT"
    NO_MAINT = "NO_MAINT"
    DAILY = "DAILY"
    NO_DAILY = "NO_DAILY"
    WEEKLY = "WEEKLY"
    NO_WEEKLY = "NO_WEEKLY"
    IGNORE_JOBS = "IGNORE_JOBS"
    NO_IGNORE_JOBS = "NO_IGNORE_JOBS"
    ANY_NODES = "ANY_NODES"
    STATIC = "STATIC"
    NO_STATIC = "NO_STATIC"
    PART_NODES = "PART_NODES"
    NO_PART_NODES = "NO_PART_NODES"
    OVERLAP = "OVERLAP"
    SPEC_NODES = "SPEC_NODES"
    TIME_FLOAT = "TIME_FLOAT"
    REPLACE = "REPLACE"
    ALL_NODES = "ALL_NODES"
    PURGE_COMP = "PURGE_COMP"
    WEEKDAY = "WEEKDAY"
    NO_WEEKDAY = "NO_WEEKDAY"
    WEEKEND = "WEEKEND"
    NO_WEEKEND = "NO_WEEKEND"
    FLEX = "FLEX"
    NO_FLEX = "NO_FLEX"
    DURATION_PLUS = "DURATION_PLUS"
    DURATION_MINUS = "DURATION_MINUS"
    NO_HOLD_JOBS_AFTER_END = "NO_HOLD_JOBS_AFTER_END"
    NO_PURGE_COMP = "NO_PURGE_COMP"
    MAGNETIC = "MAGNETIC"
    SKIP = "SKIP"
    HOURLY = "HOURLY"
    NO_HOURLY = "NO_HOURLY"
    USER_DELETE = "USER_DELETE"
    NO_USER_DELETE = "NO_USER_DELETE"
    REOCCURRING = "REOCCURRING"


class ReservationFlags(RootModel[list[ReservationFlag]]):
    root: list[ReservationFlag]


class ReservationInfoCoreSpec(RootModel[list[ReservationCoreSpec]]):
    root: list[ReservationCoreSpec]


class Duration(BaseModel):
    last: int | None = None
    """
    Total time spent doing daily daily rollup (seconds)
    """
    max: int | None = None
    """
    Longest daily rollup time (seconds)
    """
    time: int | None = None
    """
    Total time spent doing daily rollups (seconds)
    """


class Daily(BaseModel):
    count: int | None = None
    """
    Number of daily rollups since last_run
    """
    duration: Duration | None = None
    last_run: int | None = None
    """
    Last time daily rollup ran (UNIX timestamp)
    """


class Duration1(BaseModel):
    last: int | None = None
    """
    Total time spent doing last daily rollup (seconds)
    """
    max: int | None = None
    """
    Longest hourly rollup time (seconds)
    """
    time: int | None = None
    """
    Total time spent doing hourly rollups (seconds)
    """


class Hourly(BaseModel):
    count: int | None = None
    """
    Number of hourly rollups since last_run
    """
    duration: Duration1 | None = None
    last_run: int | None = None
    """
    Last time hourly rollup ran (UNIX timestamp)
    """


class Duration2(BaseModel):
    last: int | None = None
    """
    Total time spent doing monthly daily rollup (seconds)
    """
    max: int | None = None
    """
    Longest monthly rollup time (seconds)
    """
    time: int | None = None
    """
    Total time spent doing monthly rollups (seconds)
    """


class Monthly(BaseModel):
    count: int | None = None
    """
    Number of monthly rollups since last_run
    """
    duration: Duration2 | None = None
    last_run: int | None = None
    """
    Last time monthly rollup ran (UNIX timestamp)
    """


class RollupStats(BaseModel):
    daily: Daily | None = None
    hourly: Hourly | None = None
    monthly: Monthly | None = None


class ScheduleExitFields(BaseModel):
    default_queue_depth: int | None = None
    """
    Reached number of jobs allowed to be tested
    """
    end_job_queue: int | None = None
    """
    Reached end of queue
    """
    licenses: int | None = None
    """
    Blocked on licenses
    """
    max_job_start: int | None = None
    """
    Reached number of jobs allowed to start
    """
    max_rpc_cnt: int | None = None
    """
    Reached RPC limit
    """
    max_sched_time: int | None = None
    """
    Reached maximum allowed scheduler time
    """


class SharesFloat128Tres(BaseModel):
    name: str | None = None
    """
    TRES name
    """
    value: float | None = None
    """
    TRES value
    """


class SharesFloat128TresList(RootModel[list[SharesFloat128Tres]]):
    root: list[SharesFloat128Tres]


class SlurmdbJobFlag(Enum):
    NONE = "NONE"
    CLEAR_SCHEDULING = "CLEAR_SCHEDULING"
    NOT_SET = "NOT_SET"
    STARTED_ON_SUBMIT = "STARTED_ON_SUBMIT"
    STARTED_ON_SCHEDULE = "STARTED_ON_SCHEDULE"
    STARTED_ON_BACKFILL = "STARTED_ON_BACKFILL"
    START_RECEIVED = "START_RECEIVED"


class SlurmdbJobFlags(RootModel[list[SlurmdbJobFlag]]):
    root: list[SlurmdbJobFlag]


class SlurmdbdPing(BaseModel):
    hostname: str
    """
    Target for ping
    """
    latency: int
    """
    Number of microseconds it took to successfully ping or timeout
    """
    primary: bool
    """
    Is responding slurmdbd the primary controller
    """
    responding: bool
    """
    If ping RPC responded with pong from slurmdbd
    """


class SlurmdbdPingArray(RootModel[list[SlurmdbdPing]]):
    root: list[SlurmdbdPing]


class StatsMsgRpcDump(BaseModel):
    count: HostlistString
    """
    Number of RPCs received
    """
    message_type: str
    """
    Message type as string
    """
    type_id: int
    """
    Message type as integer
    """


class StatsMsgRpcQueue(BaseModel):
    count: int
    """
    Number of pending RPCs queued
    """
    message_type: str
    """
    Message type as string
    """
    type_id: int
    """
    Message type as integer
    """


class StatsMsgRpcsDump(RootModel[list[StatsMsgRpcDump]]):
    """
    Pending RPCs by hostlist
    """

    root: list[StatsMsgRpcDump]
    """
    Pending RPCs by hostlist
    """


class StatsMsgRpcsQueue(RootModel[list[StatsMsgRpcQueue]]):
    """
    Pending RPCs
    """

    root: list[StatsMsgRpcQueue]
    """
    Pending RPCs
    """


class Time2(BaseModel):
    average: int | None = None
    """
    Average RPC processing time in microseconds
    """
    total: int | None = None
    """
    Total RPC processing time in microseconds
    """


class StatsRpc(BaseModel):
    count: int | None = None
    """
    Number of RPCs processed
    """
    rpc: str | None = None
    """
    RPC type
    """
    time: Time2 | None = None


class StatsRpcList(RootModel[list[StatsRpc]]):
    root: list[StatsRpc]


class StatsUser(BaseModel):
    count: int | None = None
    """
    Number of RPCs processed
    """
    time: Time2 | None = None
    user: str | None = None
    """
    User ID
    """


class StatsUserList(RootModel[list[StatsUser]]):
    root: list[StatsUser]


class Nodes3(BaseModel):
    count: int | None = None
    """
    Number of nodes in the job step
    """
    list: Hostlist | None = None
    """
    List of nodes used by the step
    """
    range: str | None = None
    """
    Node(s) allocated to the job step
    """


class CPU1(BaseModel):
    actual_frequency: int | None = None
    """
    Average weighted CPU frequency of all tasks in kHz
    """


class Step1(BaseModel):
    id: str | None = None
    """
    Step ID
    """
    name: str | None = None
    """
    Step name
    """


class Task(BaseModel):
    distribution: str | None = None
    """
    The layout of the step was when it was running
    """


class Tasks(BaseModel):
    count: int | None = None
    """
    Total number of tasks
    """


class System1(BaseModel):
    microseconds: int | None = None
    """
    System CPU time used by the step in microseconds
    """
    seconds: int | None = None
    """
    System CPU time used by the step in seconds
    """


class Total1(BaseModel):
    microseconds: int | None = None
    """
    Total CPU time used by the step in microseconds
    """
    seconds: int | None = None
    """
    Total CPU time used by the step in seconds
    """


class User1(BaseModel):
    microseconds: int | None = None
    """
    User CPU time used by the step in microseconds
    """
    seconds: int | None = None
    """
    User CPU time used by the step in seconds
    """


class StringArray(RootModel[list[str]]):
    root: list[str]


class StringList(RootModel[list[str]]):
    root: list[str]


class Tres(BaseModel):
    count: int | None = None
    """
    TRES count (0 if listed generically)
    """
    id: int | None = None
    """
    ID used in the database
    """
    name: str | None = None
    """
    TRES name (if applicable)
    """
    type: str
    """
    TRES type (CPU, MEM, etc)
    """


class TresList(RootModel[list[Tres]]):
    root: list[Tres]


class Uint16NoValStruct(BaseModel):
    infinite: bool | None = None
    """
    True if number has been set to infinite; "set" and "number" will be ignored
    """
    number: int | None = None
    """
    If "set" is True the number will be set with value; otherwise ignore number contents
    """
    set: bool | None = None
    """
    True if number has been set; False if number is unset
    """


class Uint32NoValStruct(BaseModel):
    infinite: bool | None = None
    """
    True if number has been set to infinite; "set" and "number" will be ignored
    """
    number: int | None = None
    """
    If "set" is True the number will be set with value; otherwise ignore number contents
    """
    set: bool | None = None
    """
    True if number has been set; False if number is unset
    """


class Uint64NoValStruct(BaseModel):
    infinite: bool | None = None
    """
    True if number has been set to infinite; "set" and "number" will be ignored
    """
    number: int | None = None
    """
    If "set" is True the number will be set with value; otherwise ignore number contents
    """
    set: bool | None = None
    """
    True if number has been set; False if number is unset
    """


class Default1(BaseModel):
    account: str | None = None
    """
    Default account
    """
    wckey: str | None = None
    """
    Default WCKey
    """


class UserFlag(Enum):
    NONE = "NONE"
    DELETED = "DELETED"


class UserFlags(RootModel[list[UserFlag]]):
    root: list[UserFlag]


class UserShort(BaseModel):
    adminlevel: AdminLvl | None = None
    """
    AdminLevel granted to the user
    """
    defaultaccount: str | None = None
    """
    Default account
    """
    defaultwckey: str | None = None
    """
    Default WCKey
    """


class WarnFlag(Enum):
    BATCH_JOB = "BATCH_JOB"
    ARRAY_TASK = "ARRAY_TASK"
    FULL_STEPS_ONLY = "FULL_STEPS_ONLY"
    FULL_JOB = "FULL_JOB"
    FEDERATION_REQUEUE = "FEDERATION_REQUEUE"
    HURRY = "HURRY"
    OUT_OF_MEMORY = "OUT_OF_MEMORY"
    NO_SIBLING_JOBS = "NO_SIBLING_JOBS"
    RESERVATION_JOB = "RESERVATION_JOB"
    VERBOSE = "VERBOSE"
    CRON_JOBS = "CRON_JOBS"
    WARNING_SENT = "WARNING_SENT"


class WarnFlags(RootModel[list[WarnFlag]]):
    root: list[WarnFlag]


class WckeyFlag(Enum):
    DELETED = "DELETED"


class WckeyFlags(RootModel[list[WckeyFlag]]):
    root: list[WckeyFlag]


class WckeyTagFlag(Enum):
    ASSIGNED_DEFAULT = "ASSIGNED_DEFAULT"


class WckeyTagFlags(RootModel[list[WckeyTagFlag]]):
    root: list[WckeyTagFlag]


class WckeyTagStruct(BaseModel):
    flags: WckeyTagFlags
    """
    Active flags
    """
    wckey: str
    """
    WCKey name
    """


class X11Flag(Enum):
    FORWARD_ALL_NODES = "FORWARD_ALL_NODES"
    BATCH_NODE = "BATCH_NODE"
    FIRST_NODE = "FIRST_NODE"
    LAST_NODE = "LAST_NODE"


class X11Flags(RootModel[list[X11Flag]]):
    root: list[X11Flag]


class Account(BaseModel):
    associations: AssocShortList | None = None
    """
    Associations involving this account (only populated if requested)
    """
    coordinators: CoordList | None = None
    """
    List of users that are a coordinator of this account (only populated if requested)
    """
    description: str
    """
    Arbitrary string describing the account
    """
    flags: AccountFlags | None = None
    """
    Flags associated with this account
    """
    name: str
    """
    Account name
    """
    organization: str
    """
    Organization to which the account belongs
    """


class AccountList(RootModel[list[Account]]):
    root: list[Account]


class Accounting(BaseModel):
    TRES: Tres | None = None
    """
    Trackable resources
    """
    allocated: Allocated | None = None
    id: int | None = None
    """
    Association ID or Workload characterization key ID
    """
    id_alt: int | None = None
    """
    Alternate ID (not currently used)
    """
    start: int | None = None
    """
    When the record was started (UNIX timestamp)
    """


class AccountingList(RootModel[list[Accounting]]):
    root: list[Accounting]


class AcctGatherEnergy(BaseModel):
    average_watts: int | None = None
    """
    Average power consumption, in watts
    """
    base_consumed_energy: int | None = None
    """
    The energy consumed between when the node was powered on and the last time it was registered by slurmd, in joules
    """
    consumed_energy: int | None = None
    """
    The energy consumed between the last time the node was registered by the slurmd daemon and the last node energy accounting sample, in joules
    """
    current_watts: Uint32NoValStruct | None = None
    """
    The instantaneous power consumption at the time of the last node energy accounting sample, in watts
    """
    last_collected: int | None = None
    """
    Time when energy data was last retrieved (UNIX timestamp)
    """
    previous_consumed_energy: int | None = None
    """
    Previous value of consumed_energy
    """


class Per(BaseModel):
    accruing: Uint32NoValStruct | None = None
    """
    GrpJobsAccrue
    """
    count: Uint32NoValStruct | None = None
    """
    GrpJobs
    """
    submitted: Uint32NoValStruct | None = None
    """
    GrpSubmitJobs
    """
    wall_clock: Uint32NoValStruct | None = None
    """
    MaxWallDurationPerJob
    """


class Jobs(BaseModel):
    accruing: Uint32NoValStruct | None = None
    """
    MaxJobsAccrue
    """
    active: Uint32NoValStruct | None = None
    """
    MaxJobs
    """
    per: Per | None = None
    total: Uint32NoValStruct | None = None
    """
    MaxSubmitJobs
    """


class Account1(BaseModel):
    wall_clock: Uint32NoValStruct | None = None
    """
    GrpWall
    """


class Per1(BaseModel):
    account: Account1 | None = None


class Group(BaseModel):
    active: TresList | None = None
    """
    GrpTRESRunMins
    """
    minutes: TresList | None = None
    """
    GrpTRESMins
    """


class Per2(BaseModel):
    job: TresList | None = None
    """
    MaxTRESMinsPerJob
    """


class Minutes(BaseModel):
    per: Per2 | None = None
    total: TresList | None = None
    """
    MaxTRESMinsPerJob
    """


class Per3(BaseModel):
    job: TresList | None = None
    """
    MaxTRESPerJob
    """
    node: TresList | None = None
    """
    MaxTRESPerNode
    """


class Tres1(BaseModel):
    group: Group | None = None
    minutes: Minutes | None = None
    per: Per3 | None = None
    total: TresList | None = None
    """
    GrpTRES
    """


class Max(BaseModel):
    jobs: Jobs | None = None
    per: Per1 | None = None
    tres: Tres1 | None = None


class Min(BaseModel):
    priority_threshold: Uint32NoValStruct | None = None
    """
    MinPrioThreshold
    """


class Assoc(BaseModel):
    account: str | None = None
    """
    Account name
    """
    accounting: AccountingList | None = None
    """
    Accounting records containing related resource usage
    """
    cluster: str | None = None
    """
    Cluster name
    """
    comment: str | None = None
    """
    Arbitrary comment
    """
    default: Default | None = None
    flags: AssocFlags | None = None
    """
    Flags on the association
    """
    id: int | None = None
    """
    Unique ID
    """
    is_default: bool | None = None
    """
    Is default association for user
    """
    lineage: str | None = None
    """
    Complete path up the hierarchy to the root association
    """
    max: Max | None = None
    min: Min | None = None
    parent_account: str | None = None
    """
    Name of parent account
    """
    partition: str | None = None
    """
    Partition name
    """
    priority: Uint32NoValStruct | None = None
    """
    Association priority factor
    """
    qos: QosStringIdList | None = None
    """
    List of available QOS names
    """
    shares_raw: int | None = None
    """
    Allocated shares used for fairshare calculation
    """
    user: str
    """
    User name
    """


class AssocList(RootModel[list[Assoc]]):
    root: list[Assoc]


class AssocRecSet(BaseModel):
    comment: str | None = None
    """
    Arbitrary comment
    """
    defaultqos: str | None = None
    """
    Default QOS
    """
    fairshare: int | None = None
    """
    Allocated shares used for fairshare calculation
    """
    grpjobs: Uint32NoValStruct | None = None
    """
    Maximum number of running jobs in this association and its children
    """
    grpjobsaccrue: Uint32NoValStruct | None = None
    """
    Maximum number of pending jobs able to accrue age priority in this association and its children
    """
    grpsubmitjobs: Uint32NoValStruct | None = None
    """
    Maximum number of jobs which can be in a pending or running state at any time in this association and its children
    """
    grptres: TresList | None = None
    """
    Maximum number of TRES able to be allocated by running jobs in this association and its children
    """
    grptresmins: TresList | None = None
    """
    Total number of TRES minutes that can possibly be used by past, present and future jobs in this association and its children
    """
    grptresrunmins: TresList | None = None
    """
    Maximum number of TRES minutes able to be allocated by running jobs in this association and its children
    """
    grpwall: Uint32NoValStruct | None = None
    """
    Maximum wall clock time in minutes able to be allocated by running jobs in this association and its children
    """
    maxjobs: Uint32NoValStruct | None = None
    """
    Maximum number of running jobs per user in this association
    """
    maxjobsaccrue: Uint32NoValStruct | None = None
    """
    Maximum number of pending jobs able to accrue age priority at any given time in this association
    """
    maxsubmitjobs: Uint32NoValStruct | None = None
    """
    Maximum number of jobs which can be in a pending or running state at any time in this association
    """
    maxtresminsperjob: TresList | None = None
    """
    Maximum number of TRES minutes each job is able to use in this association
    """
    maxtresperjob: TresList | None = None
    """
    Maximum number of TRES each job is able to use in this association
    """
    maxtrespernode: TresList | None = None
    """
    Maximum number of TRES each node is able to use
    """
    maxtresrunmins: TresList | None = None
    """
    Maximum number of TRES minutes able to be allocated by running jobs in this association
    """
    maxwalldurationperjob: Uint32NoValStruct | None = None
    """
    Maximum wall clock time each job is able to use in this association
    """
    minpriothresh: Uint32NoValStruct | None = None
    """
    Minimum priority required to reserve resources when scheduling
    """
    parent: str | None = None
    """
    Name of parent account
    """
    priority: Uint32NoValStruct | None = None
    """
    Association priority factor
    """
    qoslevel: QosStringIdList | None = None
    """
    List of available QOS names
    """


class Fairshare(BaseModel):
    factor: Float64NoValStruct | None = None
    """
    Fairshare factor
    """
    level: Float64NoValStruct | None = None
    """
    Fairshare factor at this level; stored on an assoc as a long double, but that is not needed for display in sshare
    """


class ClusterRec(BaseModel):
    associations: Associations | None = None
    controller: Controller | None = None
    flags: ClusterRecFlags | None = None
    """
    Flags
    """
    name: str | None = None
    """
    ClusterName
    """
    nodes: str | None = None
    """
    Node names
    """
    rpc_version: int | None = None
    """
    RPC version used in the cluster
    """
    select_plugin: str | None = None
    tres: TresList | None = None
    """
    Trackable resources
    """


class ClusterRecList(RootModel[list[ClusterRec]]):
    root: list[ClusterRec]


class CronEntry(BaseModel):
    command: str | None = None
    """
    Command to run
    """
    day_of_month: str | None = None
    """
    Ranged string specifying eligible day of month values (e.g. 0-10,29)
    """
    day_of_week: str | None = None
    """
    Ranged string specifying eligible day of week values (e.g.0-3,7)
    """
    flags: CronEntryFlags | None = None
    """
    Flags
    """
    hour: str | None = None
    """
    Ranged string specifying eligible hour values (e.g. 0-5,23)
    """
    line: Line | None = None
    minute: str | None = None
    """
    Ranged string specifying eligible minute values (e.g. 0-10,50)
    """
    month: str | None = None
    """
    Ranged string specifying eligible month values (e.g. 0-5,12)
    """
    specification: str | None = None
    """
    Complete time specification (* means valid for all allowed values) - minute hour day_of_month month day_of_week
    """


class Array(BaseModel):
    job_id: int | None = None
    """
    Job ID of job array, or 0 if N/A
    """
    limits: Limits | None = None
    task: str | None = None
    """
    String expression of task IDs in this record
    """
    task_id: Uint32NoValStruct | None = None
    """
    Task ID of this task in job array
    """


class Het(BaseModel):
    job_id: int | None = None
    """
    Heterogeneous job ID, if applicable
    """
    job_offset: Uint32NoValStruct | None = None
    """
    Unique sequence number applied to this component of the heterogeneous job
    """


class Required(BaseModel):
    CPUs: int | None = None
    """
    Minimum number of CPUs required
    """
    memory_per_cpu: Uint64NoValStruct | None = None
    """
    Minimum memory in megabytes per allocated CPU
    """
    memory_per_node: Uint64NoValStruct | None = None
    """
    Minimum memory in megabytes per allocated node
    """


class State(BaseModel):
    current: JobState | None = None
    """
    Current state
    """
    reason: str | None = None
    """
    Reason for previous Pending or Failed state
    """


class Time1(BaseModel):
    elapsed: int | None = None
    """
    Elapsed time in seconds
    """
    eligible: int | None = None
    """
    Time when the job became eligible to run (UNIX timestamp)
    """
    end: int | None = None
    """
    End time (UNIX timestamp)
    """
    limit: Uint32NoValStruct | None = None
    """
    Maximum run time in minutes
    """
    planned: Uint64NoValStruct | None = None
    """
    Time required to start job after becoming eligible to run in seconds
    """
    start: int | None = None
    """
    Time execution began (UNIX timestamp)
    """
    submission: int | None = None
    """
    Time when the job was submitted (UNIX timestamp)
    """
    suspended: int | None = None
    """
    Total time in suspended state in seconds
    """
    system: System | None = None
    total: Total | None = None
    user: User | None = None


class Tres3(BaseModel):
    allocated: TresList | None = None
    """
    Trackable resources allocated to the job
    """
    requested: TresList | None = None
    """
    Trackable resources requested by job
    """


class JobArrayResponseArray(RootModel[list[JobArrayResponseMsgEntry]]):
    root: list[JobArrayResponseMsgEntry]


class Rlimits(BaseModel):
    as_: Uint64NoValStruct | None = Field(None, alias="as")
    """
    Address space limit
    """
    core: Uint64NoValStruct | None = None
    """
    Largest core file that can be created, in bytes
    """
    cpu: Uint64NoValStruct | None = None
    """
    Per-process CPU limit, in seconds
    """
    data: Uint64NoValStruct | None = None
    """
    Maximum size of data segment, in bytes
    """
    fsize: Uint64NoValStruct | None = None
    """
    Largest file that can be created, in bytes
    """
    memlock: Uint64NoValStruct | None = None
    """
    Locked-in-memory address space
    """
    nofile: Uint64NoValStruct | None = None
    """
    Number of open files
    """
    nproc: Uint64NoValStruct | None = None
    """
    Number of processes
    """
    rss: Uint64NoValStruct | None = None
    """
    Largest resident set size, in bytes. This affects swapping; processes that are exceeding their resident set size will be more likely to have physical memory taken from them
    """
    stack: Uint64NoValStruct | None = None
    """
    Maximum size of stack segment, in bytes
    """


class JobDescMsg(BaseModel):
    account: str | None = None
    """
    Account associated with the job
    """
    account_gather_frequency: str | None = None
    """
    Job accounting and profiling sampling intervals in seconds
    """
    admin_comment: str | None = None
    """
    Arbitrary comment made by administrator
    """
    allocation_node_list: str | None = None
    """
    Local node making the resource allocation
    """
    allocation_node_port: int | None = None
    """
    Port to send allocation confirmation to
    """
    argv: StringArray | None = None
    """
    Arguments to the script. Note: The slurmstepd always overrides argv[0] with the path to the created script file. If this option is used, argv[0] should be a throwaway value.
    """
    array: str | None = None
    """
    Job array index value specification
    """
    batch_features: str | None = None
    """
    Features required for batch script's node
    """
    begin_time: Uint64NoValStruct | None = None
    """
    Defer the allocation of the job until the specified time (UNIX timestamp)
    """
    burst_buffer: str | None = None
    """
    Burst buffer specifications
    """
    cluster_constraint: str | None = None
    """
    Required features that a federated cluster must have to have a sibling job submitted to it
    """
    clusters: str | None = None
    """
    Clusters that a federated job can run on
    """
    comment: str | None = None
    """
    Arbitrary comment made by user
    """
    constraints: str | None = None
    """
    Comma separated list of features that are required
    """
    container: str | None = None
    """
    Absolute path to OCI container bundle
    """
    container_id: str | None = None
    """
    OCI container ID
    """
    contiguous: bool | None = None
    """
    True if job requires contiguous nodes
    """
    core_specification: int | None = None
    """
    Specialized core count
    """
    cpu_binding: str | None = None
    """
    Method for binding tasks to allocated CPUs
    """
    cpu_binding_flags: CpuBindingFlags | None = None
    """
    Flags for CPU binding
    """
    cpu_frequency: str | None = None
    """
    Requested CPU frequency range <p1>[-p2][:p3]
    """
    cpus_per_task: int | None = None
    """
    Number of CPUs required by each task
    """
    cpus_per_tres: str | None = None
    """
    Semicolon delimited list of TRES=# values values indicating how many CPUs should be allocated for each specified TRES (currently only used for gres/gpu)
    """
    crontab: CronEntry | None = None
    """
    Specification for scrontab job
    """
    current_working_directory: str | None = None
    """
    Working directory to use for the job
    """
    deadline: int | None = None
    """
    Latest time that the job may start (UNIX timestamp)
    """
    delay_boot: int | None = None
    """
    Number of seconds after job eligible start that nodes will be rebooted to satisfy feature specification
    """
    dependency: str | None = None
    """
    Other jobs that must meet certain criteria before this job can start
    """
    distribution: str | None = None
    """
    Layout
    """
    distribution_plane_size: Uint16NoValStruct | None = None
    """
    Plane size specification when distribution specifies plane
    """
    end_time: int | None = None
    """
    Expected end time (UNIX timestamp)
    """
    environment: StringArray | None = None
    """
    Environment variables to be set for the job
    """
    excluded_nodes: CsvString | None = None
    """
    Comma separated list of nodes that may not be used
    """
    extra: str | None = None
    """
    Arbitrary string used for node filtering if extra constraints are enabled
    """
    flags: JobFlags | None = None
    """
    Job flags
    """
    group_id: str | None = None
    """
    Group ID of the user that owns the job
    """
    hetjob_group: int | None = None
    """
    Unique sequence number applied to this component of the heterogeneous job
    """
    hold: bool | None = None
    """
    Hold (true) or release (false) job
    """
    immediate: bool | None = None
    """
    If true, exit if resources are not available within the time period specified
    """
    job_id: int | None = None
    """
    Job ID
    """
    kill_on_node_fail: bool | None = None
    """
    If true, kill job on node failure
    """
    kill_warning_delay: Uint16NoValStruct | None = None
    """
    Number of seconds before end time to send the warning signal
    """
    kill_warning_flags: WarnFlags | None = None
    """
    Flags related to job signals
    """
    kill_warning_signal: str | None = None
    """
    Signal to send when approaching end time (e.g. "10" or "USR1")
    """
    licenses: str | None = None
    """
    License(s) required by the job
    """
    mail_type: JobMailFlags | None = None
    """
    Mail event type(s)
    """
    mail_user: str | None = None
    """
    User to receive email notifications
    """
    maximum_cpus: int | None = None
    """
    Maximum number of CPUs required
    """
    maximum_nodes: int | None = None
    """
    Maximum node count
    """
    mcs_label: str | None = None
    """
    Multi-Category Security label on the job
    """
    memory_binding: str | None = None
    """
    Binding map for map/mask_cpu
    """
    memory_binding_type: MemoryBindingType | None = None
    """
    Method for binding tasks to memory
    """
    memory_per_cpu: Uint64NoValStruct | None = None
    """
    Minimum memory in megabytes per allocated CPU
    """
    memory_per_node: Uint64NoValStruct | None = None
    """
    Minimum memory in megabytes per allocated node
    """
    memory_per_tres: str | None = None
    """
    Semicolon delimited list of TRES=# values indicating how much memory in megabytes should be allocated for each specified TRES (currently only used for gres/gpu)
    """
    minimum_boards_per_node: int | None = None
    """
    Boards per node required
    """
    minimum_cpus: int | None = None
    """
    Minimum number of CPUs required
    """
    minimum_cpus_per_node: int | None = None
    """
    Minimum number of CPUs per node
    """
    minimum_nodes: int | None = None
    """
    Minimum node count
    """
    minimum_sockets_per_board: int | None = None
    """
    Sockets per board required
    """
    name: str | None = None
    """
    Job name
    """
    network: str | None = None
    """
    Network specs for job step
    """
    nice: int | None = None
    """
    Requested job priority change
    """
    nodes: str | None = None
    """
    Node count range specification (e.g. 1-15:4)
    """
    ntasks_per_tres: int | None = None
    """
    Number of tasks that can access each GPU
    """
    oom_kill_step: int | None = None
    """
    Kill whole step in case of OOM in one of the tasks
    """
    open_mode: OpenMode | None = None
    """
    Open mode used for stdout and stderr files
    """
    overcommit: bool | None = None
    """
    Overcommit resources
    """
    partition: str | None = None
    """
    Partition assigned to the job
    """
    power_flags: list | None = None
    prefer: str | None = None
    """
    Comma separated list of features that are preferred but not required
    """
    priority: Uint32NoValStruct | None = None
    """
    Request specific job priority
    """
    profile: AcctGatherProfile | None = None
    """
    Profile used by the acct_gather_profile plugin
    """
    qos: str | None = None
    """
    Quality of Service assigned to the job
    """
    reboot: bool | None = None
    """
    Node reboot requested before start
    """
    requeue: bool | None = None
    """
    Determines whether the job may be requeued
    """
    required_nodes: CsvString | None = None
    """
    Comma separated list of required nodes
    """
    required_switches: Uint32NoValStruct | None = None
    """
    Maximum number of switches
    """
    reservation: str | None = None
    """
    Name of reservation to use
    """
    reserve_ports: int | None = None
    """
    Port to send various notification msg to
    """
    rlimits: Rlimits | None = None
    script: str | None = None
    """
    Job batch script; only the first component in a HetJob is populated or honored
    """
    segment_size: Uint16NoValStruct | None = None
    """
    Segment size for topology/block
    """
    selinux_context: str | None = None
    """
    SELinux context
    """
    shared: JobShared | None = None
    """
    How the job can share resources with other jobs, if at all
    """
    site_factor: int | None = None
    """
    Site-specific priority factor
    """
    sockets_per_node: int | None = None
    """
    Sockets per node required
    """
    spank_environment: StringArray | None = None
    """
    Environment variables for job prolog/epilog scripts as set by SPANK plugins
    """
    standard_error: str | None = None
    """
    Path to stderr file
    """
    standard_input: str | None = None
    """
    Path to stdin file
    """
    standard_output: str | None = None
    """
    Path to stdout file
    """
    tasks: int | None = None
    """
    Number of tasks
    """
    tasks_per_board: int | None = None
    """
    Number of tasks to invoke on each board
    """
    tasks_per_core: int | None = None
    """
    Number of tasks to invoke on each core
    """
    tasks_per_node: int | None = None
    """
    Number of tasks to invoke on each node
    """
    tasks_per_socket: int | None = None
    """
    Number of tasks to invoke on each socket
    """
    temporary_disk_per_node: int | None = None
    """
    Minimum tmp disk space required per node
    """
    thread_specification: int | None = None
    """
    Specialized thread count
    """
    threads_per_core: int | None = None
    """
    Threads per core required
    """
    time_limit: Uint32NoValStruct | None = None
    """
    Maximum run time in minutes
    """
    time_minimum: Uint32NoValStruct | None = None
    """
    Minimum run time in minutes
    """
    tres_bind: str | None = None
    """
    Task to TRES binding directives
    """
    tres_freq: str | None = None
    """
    TRES frequency directives
    """
    tres_per_job: str | None = None
    """
    Comma separated list of TRES=# values to be allocated for every job
    """
    tres_per_node: str | None = None
    """
    Comma separated list of TRES=# values to be allocated for every node
    """
    tres_per_socket: str | None = None
    """
    Comma separated list of TRES=# values to be allocated for every socket
    """
    tres_per_task: str | None = None
    """
    Comma separated list of TRES=# values to be allocated for every task
    """
    user_id: str | None = None
    """
    User ID that owns the job
    """
    wait_all_nodes: bool | None = None
    """
    If true, wait to start until after all nodes have booted
    """
    wait_for_switch: int | None = None
    """
    Maximum time to wait for switches in seconds
    """
    wckey: str | None = None
    """
    Workload characterization key
    """
    x11: X11Flags | None = None
    """
    X11 forwarding options
    """
    x11_magic_cookie: str | None = None
    """
    Magic cookie for X11 forwarding
    """
    x11_target_host: str | None = None
    """
    Hostname or UNIX socket if x11_target_port=0
    """
    x11_target_port: int | None = None
    """
    TCP port
    """


class JobDescMsgList(RootModel[list[JobDescMsg]]):
    root: list[JobDescMsg]


class JobResCore(BaseModel):
    index: int
    """
    Core index
    """
    status: JobResCoreStatus
    """
    Core status
    """


class JobResCoreArray(RootModel[list[JobResCore]]):
    root: list[JobResCore]


class JobResSocket(BaseModel):
    cores: JobResCoreArray
    """
    Core in socket
    """
    index: int
    """
    Core index
    """


class JobResSocketArray(RootModel[list[JobResSocket]]):
    root: list[JobResSocket]


class KillJobsRespJob(BaseModel):
    error: Error | None = None
    federation: Federation | None = None
    job_id: Uint32NoValStruct
    """
    Job ID that signaling failed
    """
    step_id: str
    """
    Job or Step ID that signaling failed
    """


class KillJobsRespMsg(RootModel[list[KillJobsRespJob]]):
    """
    List of jobs signal responses
    """

    root: list[KillJobsRespJob]
    """
    List of jobs signal responses
    """


class Node(BaseModel):
    active_features: CsvString | None = None
    """
    Currently active features
    """
    address: str | None = None
    """
    NodeAddr, used to establish a communication path
    """
    alloc_cpus: int | None = None
    """
    Total number of CPUs currently allocated for jobs
    """
    alloc_idle_cpus: int | None = None
    """
    Total number of idle CPUs
    """
    alloc_memory: int | None = None
    """
    Total memory in MB currently allocated for jobs
    """
    architecture: str | None = None
    """
    Computer architecture
    """
    boards: int | None = None
    """
    Number of Baseboards in nodes with a baseboard controller
    """
    boot_time: Uint64NoValStruct | None = None
    """
    Time when the node booted (UNIX timestamp)
    """
    burstbuffer_network_address: str | None = None
    """
    Alternate network path to be used for sbcast network traffic
    """
    cluster_name: str | None = None
    """
    Cluster name (only set in federated environments)
    """
    comment: str | None = None
    """
    Arbitrary comment
    """
    cores: int | None = None
    """
    Number of cores in a single physical processor socket
    """
    cpu_binding: int | None = None
    """
    Default method for binding tasks to allocated CPUs
    """
    cpu_load: int | None = None
    """
    CPU load as reported by the OS
    """
    cpus: int | None = None
    """
    Total CPUs, including cores and threads
    """
    effective_cpus: int | None = None
    """
    Number of effective CPUs (excluding specialized CPUs)
    """
    energy: AcctGatherEnergy | None = None
    """
    Energy usage data
    """
    external_sensors: dict[str, Any] | None = None
    extra: str | None = None
    """
    Arbitrary string used for node filtering if extra constraints are enabled
    """
    features: CsvString | None = None
    """
    Available features
    """
    free_mem: Uint64NoValStruct | None = None
    """
    Total memory in MB currently free as reported by the OS
    """
    gpu_spec: str | None = None
    """
    CPU cores reserved for jobs that also use a GPU
    """
    gres: str | None = None
    """
    Generic resources
    """
    gres_drained: str | None = None
    """
    Drained generic resources
    """
    gres_used: str | None = None
    """
    Generic resources currently in use
    """
    hostname: str | None = None
    """
    NodeHostname
    """
    instance_id: str | None = None
    """
    Cloud instance ID
    """
    instance_type: str | None = None
    """
    Cloud instance type
    """
    last_busy: Uint64NoValStruct | None = None
    """
    Time when the node was last busy (UNIX timestamp)
    """
    mcs_label: str | None = None
    """
    Multi-Category Security label
    """
    name: str | None = None
    """
    NodeName
    """
    next_state_after_reboot: NodeStates | None = None
    """
    The state the node will be assigned after rebooting
    """
    operating_system: str | None = None
    """
    Operating system reported by the node
    """
    owner: str | None = None
    """
    User allowed to run jobs on this node (unset if no restriction)
    """
    partitions: CsvString | None = None
    """
    Partitions containing this node
    """
    port: int | None = None
    """
    TCP port number of the slurmd
    """
    power: dict[str, Any] | None = None
    real_memory: int | None = None
    """
    Total memory in MB on the node
    """
    reason: str | None = None
    """
    Describes why the node is in a "DOWN", "DRAINED", "DRAINING", "FAILING" or "FAIL" state
    """
    reason_changed_at: Uint64NoValStruct | None = None
    """
    When the reason changed (UNIX timestamp)
    """
    reason_set_by_user: str | None = None
    """
    User who set the reason
    """
    res_cores_per_gpu: int | None = None
    """
    Number of CPU cores per GPU restricted to GPU jobs
    """
    reservation: str | None = None
    """
    Name of reservation containing this node
    """
    resume_after: Uint64NoValStruct | None = None
    """
    Number of seconds after the node's state is updated to "DOWN" or "DRAIN" before scheduling a node state resume
    """
    slurmd_start_time: Uint64NoValStruct | None = None
    """
    Time when the slurmd started (UNIX timestamp)
    """
    sockets: int | None = None
    """
    Number of physical processor sockets/chips on the node
    """
    specialized_cores: int | None = None
    """
    Number of cores reserved for system use
    """
    specialized_cpus: str | None = None
    """
    Abstract CPU IDs on this node reserved for exclusive use by slurmd and slurmstepd
    """
    specialized_memory: int | None = None
    """
    Combined memory limit, in MB, for Slurm compute node daemons
    """
    state: NodeStates | None = None
    """
    Node state(s) applicable to this node
    """
    temporary_disk: int | None = None
    """
    Total size in MB of temporary disk storage in TmpFS
    """
    threads: int | None = None
    """
    Number of logical threads in a single physical core
    """
    tres: str | None = None
    """
    Configured trackable resources
    """
    tres_used: str | None = None
    """
    Trackable resources currently allocated for jobs
    """
    tres_weighted: float | None = None
    """
    Weighted number of billable trackable resources allocated
    """
    version: str | None = None
    """
    Slurmd version
    """
    weight: int | None = None
    """
    Weight of the node for scheduling purposes
    """


class Nodes1(RootModel[list[Node]]):
    root: list[Node]


class OpenapiMeta(BaseModel):
    client: Client | None = None
    command: StringArray | None = None
    """
    CLI command (if applicable)
    """
    plugin: Plugin | None = None
    slurm: Slurm | None = None


class OpenapiResp(BaseModel):
    errors: OpenapiErrors | None = None
    """
    Query errors
    """
    meta: OpenapiMeta | None = None
    """
    Slurm meta values
    """
    warnings: OpenapiWarnings | None = None
    """
    Query warnings
    """


class OpenapiSlurmdbdPingResp(BaseModel):
    errors: OpenapiErrors | None = None
    """
    Query errors
    """
    meta: OpenapiMeta | None = None
    """
    Slurm meta values
    """
    pings: SlurmdbdPingArray
    """
    pings
    """
    warnings: OpenapiWarnings | None = None
    """
    Query warnings
    """


class OpenapiSlurmdbdQosRemovedResp(BaseModel):
    errors: OpenapiErrors | None = None
    """
    Query errors
    """
    meta: OpenapiMeta | None = None
    """
    Slurm meta values
    """
    removed_qos: StringList
    """
    removed QOS
    """
    warnings: OpenapiWarnings | None = None
    """
    Query warnings
    """


class OpenapiTresResp(BaseModel):
    TRES: TresList
    """
    TRES
    """
    errors: OpenapiErrors | None = None
    """
    Query errors
    """
    meta: OpenapiMeta | None = None
    """
    Slurm meta values
    """
    warnings: OpenapiWarnings | None = None
    """
    Query warnings
    """


class OpenapiUsersAddCondRespStr(BaseModel):
    added_users: str
    """
    added_users
    """
    errors: OpenapiErrors | None = None
    """
    Query errors
    """
    meta: OpenapiMeta | None = None
    """
    Slurm meta values
    """
    warnings: OpenapiWarnings | None = None
    """
    Query warnings
    """


class OpenapiWckeyRemovedResp(BaseModel):
    deleted_wckeys: StringList
    """
    deleted wckeys
    """
    errors: OpenapiErrors | None = None
    """
    Query errors
    """
    meta: OpenapiMeta | None = None
    """
    Slurm meta values
    """
    warnings: OpenapiWarnings | None = None
    """
    Query warnings
    """


class Defaults(BaseModel):
    job: str | None = None
    """
    JobDefaults
    """
    memory_per_cpu: int | None = None
    """
    DefMemPerCPU or DefMemPerNode
    """
    partition_memory_per_cpu: Uint64NoValStruct | None = None
    """
    DefMemPerCPU
    """
    partition_memory_per_node: Uint64NoValStruct | None = None
    """
    DefMemPerNode
    """
    time: Uint32NoValStruct | None = None
    """
    DefaultTime in minutes
    """


class Maximums(BaseModel):
    cpus_per_node: Uint32NoValStruct | None = None
    """
    MaxCPUsPerNode
    """
    cpus_per_socket: Uint32NoValStruct | None = None
    """
    MaxCPUsPerSocket
    """
    memory_per_cpu: int | None = None
    """
    MaxMemPerCPU or MaxMemPerNode
    """
    nodes: Uint32NoValStruct | None = None
    """
    MaxNodes
    """
    over_time_limit: Uint16NoValStruct | None = None
    """
    OverTimeLimit
    """
    oversubscribe: Oversubscribe | None = None
    partition_memory_per_cpu: Uint64NoValStruct | None = None
    """
    MaxMemPerCPU
    """
    partition_memory_per_node: Uint64NoValStruct | None = None
    """
    MaxMemPerNode
    """
    shares: int | None = None
    """
    OverSubscribe
    """
    time: Uint32NoValStruct | None = None
    """
    MaxTime
    """


class Partition(BaseModel):
    state: PartitionStates | None = None
    """
    Current state(s)
    """


class Timeouts(BaseModel):
    resume: Uint16NoValStruct | None = None
    """
    ResumeTimeout (GLOBAL if both set and infinite are false)
    """
    suspend: Uint16NoValStruct | None = None
    """
    SuspendTimeout (GLOBAL if both set and infinite are false)
    """


class PartitionInfo(BaseModel):
    accounts: Accounts | None = None
    alternate: str | None = None
    """
    Alternate
    """
    cluster: str | None = None
    """
    Cluster name
    """
    cpus: Cpus1 | None = None
    defaults: Defaults | None = None
    grace_time: int | None = None
    """
    GraceTime
    """
    groups: Groups | None = None
    maximums: Maximums | None = None
    minimums: Minimums | None = None
    name: str | None = None
    """
    PartitionName
    """
    node_sets: str | None = None
    """
    NodeSets
    """
    nodes: Nodes2 | None = None
    partition: Partition | None = None
    priority: Priority | None = None
    qos: Qos | None = None
    select_type: CrType | None = None
    """
    Scheduler consumable resource selection type
    """
    suspend_time: Uint32NoValStruct | None = None
    """
    SuspendTime (GLOBAL if both set and infinite are false)
    """
    timeouts: Timeouts | None = None
    tres: Tres4 | None = None


class PartitionInfoMsg(RootModel[list[PartitionInfo]]):
    root: list[PartitionInfo]


class Signal(BaseModel):
    id: Uint16NoValStruct | None = None
    """
    Signal sent to process (numeric)
    """
    name: str | None = None
    """
    Signal sent to process (name)
    """


class ProcessExitCodeVerbose(BaseModel):
    return_code: Uint32NoValStruct | None = None
    """
    Process return code (numeric)
    """
    signal: Signal | None = None
    status: ProcessExitCodeStatus | None = None
    """
    Status given by return code
    """


class Per4(BaseModel):
    account: Uint32NoValStruct | None = None
    """
    MaxJobsAccruePerAccount
    """
    user: Uint32NoValStruct | None = None
    """
    MaxJobsAccruePerUser
    """


class Accruing(BaseModel):
    per: Per4 | None = None


class ActiveJobs(BaseModel):
    accruing: Uint32NoValStruct | None = None
    """
    GrpJobsAccrue
    """
    count: Uint32NoValStruct | None = None
    """
    GrpJobs
    """


class Per5(BaseModel):
    account: Uint32NoValStruct | None = None
    """
    MaxJobsPerAccount
    """
    user: Uint32NoValStruct | None = None
    """
    MaxJobsPerUser
    """


class ActiveJobs1(BaseModel):
    per: Per5 | None = None


class Per6(BaseModel):
    account: Uint32NoValStruct | None = None
    """
    MaxSubmitJobsPerAccount
    """
    user: Uint32NoValStruct | None = None
    """
    MaxSubmitJobsPerUser
    """


class Jobs1(BaseModel):
    active_jobs: ActiveJobs1 | None = None
    count: Uint32NoValStruct | None = None
    """
    GrpSubmitJobs
    """
    per: Per6 | None = None


class Per7(BaseModel):
    account: TresList | None = None
    """
    MaxTRESRunMinsPerAccount
    """
    job: TresList | None = None
    """
    MaxTRESMinsPerJob
    """
    qos: TresList | None = None
    """
    GrpTRESRunMins
    """
    user: TresList | None = None
    """
    MaxTRESRunMinsPerUser
    """


class Minutes1(BaseModel):
    per: Per7 | None = None
    total: TresList | None = None
    """
    GrpTRESMins
    """


class Per8(BaseModel):
    account: TresList | None = None
    """
    MaxTRESPerAccount
    """
    job: TresList | None = None
    """
    MaxTRESPerJob
    """
    node: TresList | None = None
    """
    MaxTRESPerNode
    """
    user: TresList | None = None
    """
    MaxTRESPerUser
    """


class Tres5(BaseModel):
    minutes: Minutes1 | None = None
    per: Per8 | None = None
    total: TresList | None = None
    """
    GrpTRES
    """


class Per9(BaseModel):
    job: Uint32NoValStruct | None = None
    """
    MaxWallDurationPerJob
    """
    qos: Uint32NoValStruct | None = None
    """
    GrpWall
    """


class WallClock(BaseModel):
    per: Per9 | None = None


class Max2(BaseModel):
    accruing: Accruing | None = None
    active_jobs: ActiveJobs | None = None
    jobs: Jobs1 | None = None
    tres: Tres5 | None = None
    wall_clock: WallClock | None = None


class Per10(BaseModel):
    job: TresList | None = None
    """
    MinTRES
    """


class Tres6(BaseModel):
    per: Per10 | None = None


class Min1(BaseModel):
    priority_threshold: Uint32NoValStruct | None = None
    """
    MinPrioThreshold
    """
    tres: Tres6 | None = None


class Limits1(BaseModel):
    factor: Float64NoValStruct | None = None
    """
    LimitFactor
    """
    grace_time: int | None = None
    """
    GraceTime
    """
    max: Max2 | None = None
    min: Min1 | None = None


class Preempt(BaseModel):
    exempt_time: Uint32NoValStruct | None = None
    """
    PreemptExemptTime
    """
    list: QosPreemptList | None = None
    """
    Other QOS's this QOS can preempt
    """
    mode: QosPreemptModes | None = None
    """
    PreemptMode
    """


class Qos1(BaseModel):
    description: str | None = None
    """
    Arbitrary description
    """
    flags: QosFlags | None = None
    """
    Flags, to avoid modifying current values specify NOT_SET
    """
    id: int | None = None
    """
    Unique ID
    """
    limits: Limits1 | None = None
    name: str | None = None
    """
    Name
    """
    preempt: Preempt | None = None
    priority: Uint32NoValStruct | None = None
    """
    Priority
    """
    usage_factor: Float64NoValStruct | None = None
    """
    UsageFactor
    """
    usage_threshold: Float64NoValStruct | None = None
    """
    UsageThreshold
    """


class QosList(RootModel[list[Qos1]]):
    root: list[Qos1]


class PurgeCompleted(BaseModel):
    time: Uint32NoValStruct | None = None
    """
    If PURGE_COMP flag is set, the number of seconds this reservation will sit idle until it is revoked
    """


class ReservationInfo(BaseModel):
    accounts: str | None = None
    """
    Comma separated list of permitted accounts
    """
    burst_buffer: str | None = None
    """
    BurstBuffer
    """
    core_count: int | None = None
    """
    CoreCnt
    """
    core_specializations: ReservationInfoCoreSpec | None = None
    """
    Reserved cores specification
    """
    end_time: Uint64NoValStruct | None = None
    """
    EndTime (UNIX timestamp)
    """
    features: str | None = None
    """
    Features
    """
    flags: ReservationFlags | None = None
    """
    Flags associated with this reservation
    """
    groups: str | None = None
    """
    Groups
    """
    licenses: str | None = None
    """
    Licenses
    """
    max_start_delay: int | None = None
    """
    MaxStartDelay in seconds
    """
    name: str | None = None
    """
    ReservationName
    """
    node_count: int | None = None
    """
    NodeCnt
    """
    node_list: str | None = None
    """
    Nodes
    """
    partition: str | None = None
    """
    PartitionName
    """
    purge_completed: PurgeCompleted | None = None
    start_time: Uint64NoValStruct | None = None
    """
    StartTime (UNIX timestamp)
    """
    tres: str | None = None
    """
    Comma separated list of required TRES
    """
    users: str | None = None
    """
    Comma separated list of permitted users
    """
    watts: Uint32NoValStruct | None = None
    """
    32 bit integer number with flags
    """


class ReservationInfoMsg(RootModel[list[ReservationInfo]]):
    root: list[ReservationInfo]


class SharesUint64Tres(BaseModel):
    name: str | None = None
    """
    TRES name
    """
    value: Uint64NoValStruct | None = None
    """
    TRES value
    """


class SharesUint64TresList(RootModel[list[SharesUint64Tres]]):
    root: list[SharesUint64Tres]


class StatsMsgRpcType(BaseModel):
    average_time: Uint64NoValStruct
    """
    Average time spent processing RPC in seconds
    """
    count: int
    """
    Number of RPCs received
    """
    cycle_last: int
    """
    Number of RPCs processed within the last RPC queue cycle
    """
    cycle_max: int
    """
    Maximum number of RPCs processed within a RPC queue cycle since start
    """
    dropped: int
    """
    Number of RPCs dropped
    """
    message_type: str
    """
    Message type as string
    """
    queued: int
    """
    Number of RPCs queued
    """
    total_time: int
    """
    Total time spent processing RPC in seconds
    """
    type_id: int
    """
    Message type as integer
    """


class StatsMsgRpcUser(BaseModel):
    average_time: Uint64NoValStruct
    """
    Average time spent processing RPC in seconds
    """
    count: int
    """
    Number of RPCs received
    """
    total_time: int
    """
    Total time spent processing RPC in seconds
    """
    user: str
    """
    User name
    """
    user_id: int
    """
    User ID (numeric)
    """


class StatsMsgRpcsByType(RootModel[list[StatsMsgRpcType]]):
    """
    RPCs by type
    """

    root: list[StatsMsgRpcType]
    """
    RPCs by type
    """


class StatsMsgRpcsByUser(RootModel[list[StatsMsgRpcUser]]):
    """
    RPCs by user
    """

    root: list[StatsMsgRpcUser]
    """
    RPCs by user
    """


class StatsRec(BaseModel):
    RPCs: StatsRpcList | None = None
    """
    List of RPCs sent to the slurmdbd
    """
    rollups: RollupStats | None = None
    """
    Rollup statistics
    """
    time_start: int | None = None
    """
    When data collection started (UNIX timestamp)
    """
    users: StatsUserList | None = None
    """
    List of users that issued RPCs
    """


class RequestedFrequency(BaseModel):
    max: Uint32NoValStruct | None = None
    """
    Maximum requested CPU frequency in kHz
    """
    min: Uint32NoValStruct | None = None
    """
    Minimum requested CPU frequency in kHz
    """


class CPU(BaseModel):
    governor: str | None = None
    """
    Requested CPU frequency governor in kHz
    """
    requested_frequency: RequestedFrequency | None = None


class Energy(BaseModel):
    consumed: Uint64NoValStruct | None = None
    """
    Total energy consumed by all tasks in a job in joules
    """


class Statistics(BaseModel):
    CPU: CPU1 | None = None
    energy: Energy | None = None


class Time4(BaseModel):
    elapsed: int | None = None
    """
    Elapsed time in seconds
    """
    end: Uint64NoValStruct | None = None
    """
    End time (UNIX timestamp)
    """
    start: Uint64NoValStruct | None = None
    """
    Time execution began (UNIX timestamp)
    """
    suspended: int | None = None
    """
    Total time in suspended state in seconds
    """
    system: System1 | None = None
    total: Total1 | None = None
    user: User1 | None = None


class StepTresReqMax(RootModel[list[Tres]]):
    root: list[Tres]


class StepTresReqMin(RootModel[list[Tres]]):
    root: list[Tres]


class StepTresUsageMax(RootModel[list[Tres]]):
    root: list[Tres]


class StepTresUsageMin(RootModel[list[Tres]]):
    root: list[Tres]


class UsersAddCond(BaseModel):
    accounts: StringList | None = None
    """
    CSV accounts list
    """
    association: AssocRecSet | None = None
    """
    Association limits and options
    """
    clusters: StringList | None = None
    """
    CSV clusters list
    """
    partitions: StringList | None = None
    """
    CSV partitions list
    """
    users: StringList
    """
    CSV users list
    """
    wckeys: StringList | None = None
    """
    CSV WCKeys list
    """


class Wckey(BaseModel):
    accounting: AccountingList | None = None
    """
    Accounting records containing related resource usage
    """
    cluster: str
    """
    Cluster name
    """
    flags: WckeyFlags | None = None
    """
    Flags associated with this WCKey
    """
    id: int | None = None
    """
    Unique ID for this user-cluster-wckey combination
    """
    name: str
    """
    WCKey name
    """
    user: str
    """
    User name
    """


class WckeyList(RootModel[list[Wckey]]):
    root: list[Wckey]


class AccountsAddCond(BaseModel):
    accounts: StringList
    """
    CSV accounts list
    """
    association: AssocRecSet | None = None
    """
    Association limits and options
    """
    clusters: StringList | None = None
    """
    CSV clusters list
    """


class Tres2(BaseModel):
    group_minutes: SharesUint64TresList | None = None
    """
    TRES-minute limit
    """
    run_seconds: SharesUint64TresList | None = None
    """
    Currently running tres-secs = grp_used_tres_run_secs
    """
    usage: SharesFloat128TresList | None = None
    """
    Measure of each TRES usage
    """


class AssocSharesObjWrap(BaseModel):
    cluster: str | None = None
    """
    Cluster name
    """
    effective_usage: Float64NoValStruct | None = None
    """
    Effective, normalized usage
    """
    fairshare: Fairshare | None = None
    id: int | None = None
    """
    Association ID
    """
    name: str | None = None
    """
    Share name
    """
    parent: str | None = None
    """
    Parent name
    """
    partition: str | None = None
    """
    Partition name
    """
    shares: Uint32NoValStruct | None = None
    """
    Number of shares allocated
    """
    shares_normalized: Float64NoValStruct | None = None
    """
    Normalized shares
    """
    tres: Tres2 | None = None
    type: AssocSharesObjWrapType | None = None
    """
    User or account association
    """
    usage: int | None = None
    """
    Measure of tresbillableunits usage
    """
    usage_normalized: Float64NoValStruct | None = None
    """
    Normalized usage
    """


class JobResNode(BaseModel):
    cpus: Cpus | None = None
    index: int
    """
    Node index
    """
    memory: Memory | None = None
    name: str
    """
    Node name
    """
    sockets: JobResSocketArray
    """
    Socket allocations in node
    """


class JobResNodes(RootModel[list[JobResNode]]):
    """
    Job resources for a node
    """

    root: list[JobResNode]
    """
    Job resources for a node
    """


class OpenapiAccountsAddCondResp(BaseModel):
    account: AccountShort | None = None
    """
    Account organization and description
    """
    association_condition: AccountsAddCond | None = None
    """
    CSV list of accounts, association limits and options, CSV list of clusters
    """
    errors: OpenapiErrors | None = None
    """
    Query errors
    """
    meta: OpenapiMeta | None = None
    """
    Slurm meta values
    """
    warnings: OpenapiWarnings | None = None
    """
    Query warnings
    """


class OpenapiAccountsAddCondRespStr(BaseModel):
    added_accounts: str
    """
    added_accounts
    """
    errors: OpenapiErrors | None = None
    """
    Query errors
    """
    meta: OpenapiMeta | None = None
    """
    Slurm meta values
    """
    warnings: OpenapiWarnings | None = None
    """
    Query warnings
    """


class OpenapiAccountsRemovedResp(BaseModel):
    errors: OpenapiErrors | None = None
    """
    Query errors
    """
    meta: OpenapiMeta | None = None
    """
    Slurm meta values
    """
    removed_accounts: StringList
    """
    removed_accounts
    """
    warnings: OpenapiWarnings | None = None
    """
    Query warnings
    """


class OpenapiAccountsResp(BaseModel):
    accounts: AccountList
    """
    accounts
    """
    errors: OpenapiErrors | None = None
    """
    Query errors
    """
    meta: OpenapiMeta | None = None
    """
    Slurm meta values
    """
    warnings: OpenapiWarnings | None = None
    """
    Query warnings
    """


class OpenapiAssocsRemovedResp(BaseModel):
    errors: OpenapiErrors | None = None
    """
    Query errors
    """
    meta: OpenapiMeta | None = None
    """
    Slurm meta values
    """
    removed_associations: StringList
    """
    removed_associations
    """
    warnings: OpenapiWarnings | None = None
    """
    Query warnings
    """


class OpenapiAssocsResp(BaseModel):
    associations: AssocList
    """
    associations
    """
    errors: OpenapiErrors | None = None
    """
    Query errors
    """
    meta: OpenapiMeta | None = None
    """
    Slurm meta values
    """
    warnings: OpenapiWarnings | None = None
    """
    Query warnings
    """


class OpenapiClustersRemovedResp(BaseModel):
    deleted_clusters: StringList
    """
    deleted_clusters
    """
    errors: OpenapiErrors | None = None
    """
    Query errors
    """
    meta: OpenapiMeta | None = None
    """
    Slurm meta values
    """
    warnings: OpenapiWarnings | None = None
    """
    Query warnings
    """


class OpenapiClustersResp(BaseModel):
    clusters: ClusterRecList
    """
    clusters
    """
    errors: OpenapiErrors | None = None
    """
    Query errors
    """
    meta: OpenapiMeta | None = None
    """
    Slurm meta values
    """
    warnings: OpenapiWarnings | None = None
    """
    Query warnings
    """


class OpenapiInstancesResp(BaseModel):
    errors: OpenapiErrors | None = None
    """
    Query errors
    """
    instances: InstanceList
    """
    instances
    """
    meta: OpenapiMeta | None = None
    """
    Slurm meta values
    """
    warnings: OpenapiWarnings | None = None
    """
    Query warnings
    """


class OpenapiSlurmdbdQosResp(BaseModel):
    errors: OpenapiErrors | None = None
    """
    Query errors
    """
    meta: OpenapiMeta | None = None
    """
    Slurm meta values
    """
    qos: QosList
    """
    List of QOS
    """
    warnings: OpenapiWarnings | None = None
    """
    Query warnings
    """


class OpenapiSlurmdbdStatsResp(BaseModel):
    errors: OpenapiErrors | None = None
    """
    Query errors
    """
    meta: OpenapiMeta | None = None
    """
    Slurm meta values
    """
    statistics: StatsRec
    """
    statistics
    """
    warnings: OpenapiWarnings | None = None
    """
    Query warnings
    """


class OpenapiUsersAddCondResp(BaseModel):
    association_condition: UsersAddCond
    """
    Filters to select associations for users
    """
    errors: OpenapiErrors | None = None
    """
    Query errors
    """
    meta: OpenapiMeta | None = None
    """
    Slurm meta values
    """
    user: UserShort
    """
    Admin level of user, DefaultAccount, DefaultWCKey
    """
    warnings: OpenapiWarnings | None = None
    """
    Query warnings
    """


class OpenapiWckeyResp(BaseModel):
    errors: OpenapiErrors | None = None
    """
    Query errors
    """
    meta: OpenapiMeta | None = None
    """
    Slurm meta values
    """
    warnings: OpenapiWarnings | None = None
    """
    Query warnings
    """
    wckeys: WckeyList
    """
    wckeys
    """


class StatsMsg(BaseModel):
    agent_count: int | None = None
    """
    Number of agent threads
    """
    agent_queue_size: int | None = None
    """
    Number of enqueued outgoing RPC requests in an internal retry list
    """
    agent_thread_count: int | None = None
    """
    Total number of active threads created by all agent threads
    """
    bf_active: bool | None = None
    """
    Backfill scheduler currently running
    """
    bf_backfilled_het_jobs: int | None = None
    """
    Number of heterogeneous job components started through backfilling since last Slurm start
    """
    bf_backfilled_jobs: int | None = None
    """
    Number of jobs started through backfilling since last slurm start
    """
    bf_cycle_counter: int | None = None
    """
    Number of backfill scheduling cycles since last reset
    """
    bf_cycle_last: int | None = None
    """
    Execution time in microseconds of last backfill scheduling cycle
    """
    bf_cycle_max: int | None = None
    """
    Execution time in microseconds of longest backfill scheduling cycle
    """
    bf_cycle_mean: int | None = None
    """
    Mean time in microseconds of backfilling scheduling cycles since last reset
    """
    bf_cycle_sum: int | None = None
    """
    Total time in microseconds of backfilling scheduling cycles since last reset
    """
    bf_depth_mean: int | None = None
    """
    Mean number of eligible to run jobs processed during all backfilling scheduling cycles since last reset
    """
    bf_depth_mean_try: int | None = None
    """
    The subset of Depth Mean that the backfill scheduler attempted to schedule
    """
    bf_depth_sum: int | None = None
    """
    Total number of jobs processed during all backfilling scheduling cycles since last reset
    """
    bf_depth_try_sum: int | None = None
    """
    Subset of bf_depth_sum that the backfill scheduler attempted to schedule
    """
    bf_exit: BfExitFields | None = None
    """
    Reasons for which the backfill scheduling cycle exited since last reset
    """
    bf_last_backfilled_jobs: int | None = None
    """
    Number of jobs started through backfilling since last reset
    """
    bf_last_depth: int | None = None
    """
    Number of processed jobs during last backfilling scheduling cycle
    """
    bf_last_depth_try: int | None = None
    """
    Number of processed jobs during last backfilling scheduling cycle that had a chance to start using available resources
    """
    bf_queue_len: int | None = None
    """
    Number of jobs pending to be processed by backfilling algorithm
    """
    bf_queue_len_mean: int | None = None
    """
    Mean number of jobs pending to be processed by backfilling algorithm
    """
    bf_queue_len_sum: int | None = None
    """
    Total number of jobs pending to be processed by backfilling algorithm since last reset
    """
    bf_table_size: int | None = None
    """
    Number of different time slots tested by the backfill scheduler in its last iteration
    """
    bf_table_size_mean: int | None = None
    """
    Mean number of different time slots tested by the backfill scheduler
    """
    bf_table_size_sum: int | None = None
    """
    Total number of different time slots tested by the backfill scheduler
    """
    bf_when_last_cycle: Uint64NoValStruct | None = None
    """
    When the last backfill scheduling cycle happened (UNIX timestamp)
    """
    dbd_agent_queue_size: int | None = None
    """
    Number of messages for SlurmDBD that are queued
    """
    gettimeofday_latency: int | None = None
    """
    Latency of 1000 calls to the gettimeofday() syscall in microseconds, as measured at controller startup
    """
    job_states_ts: Uint64NoValStruct | None = None
    """
    When the job state counts were gathered (UNIX timestamp)
    """
    jobs_canceled: int | None = None
    """
    Number of jobs canceled since the last reset
    """
    jobs_completed: int | None = None
    """
    Number of jobs completed since last reset
    """
    jobs_failed: int | None = None
    """
    Number of jobs failed due to slurmd or other internal issues since last reset
    """
    jobs_pending: int | None = None
    """
    Number of jobs pending at the time of listed in job_state_ts
    """
    jobs_running: int | None = None
    """
    Number of jobs running at the time of listed in job_state_ts
    """
    jobs_started: int | None = None
    """
    Number of jobs started since last reset
    """
    jobs_submitted: int | None = None
    """
    Number of jobs submitted since last reset
    """
    parts_packed: int | None = None
    """
    Zero if only RPC statistic included
    """
    pending_rpcs: StatsMsgRpcsQueue | None = None
    """
    Pending RPC statistics
    """
    pending_rpcs_by_hostlist: StatsMsgRpcsDump | None = None
    """
    Pending RPCs hostlists
    """
    req_time: Uint64NoValStruct | None = None
    """
    When the request was made (UNIX timestamp)
    """
    req_time_start: Uint64NoValStruct | None = None
    """
    When the data in the report started (UNIX timestamp)
    """
    rpcs_by_message_type: StatsMsgRpcsByType | None = None
    """
    Most frequently issued remote procedure calls (RPCs)
    """
    rpcs_by_user: StatsMsgRpcsByUser | None = None
    """
    RPCs issued by user ID
    """
    schedule_cycle_depth: int | None = None
    """
    Total number of jobs processed in scheduling cycles
    """
    schedule_cycle_last: int | None = None
    """
    Time in microseconds for last scheduling cycle
    """
    schedule_cycle_max: int | None = None
    """
    Max time of any scheduling cycle in microseconds since last reset
    """
    schedule_cycle_mean: int | None = None
    """
    Mean time in microseconds for all scheduling cycles since last reset
    """
    schedule_cycle_mean_depth: int | None = None
    """
    Mean of the number of jobs processed in a scheduling cycle
    """
    schedule_cycle_per_minute: int | None = None
    """
    Number of scheduling executions per minute
    """
    schedule_cycle_sum: int | None = None
    """
    Total run time in microseconds for all scheduling cycles since last reset
    """
    schedule_cycle_total: int | None = None
    """
    Number of scheduling cycles since last reset
    """
    schedule_exit: ScheduleExitFields | None = None
    """
    Reasons for which the scheduling cycle exited since last reset
    """
    schedule_queue_length: int | None = None
    """
    Number of jobs pending in queue
    """
    server_thread_count: int | None = None
    """
    Number of current active slurmctld threads
    """


class Consumed(BaseModel):
    average: TresList | None = None
    """
    Average TRES usage consumed among all tasks
    """
    max: StepTresUsageMax | None = None
    """
    Maximum TRES usage consumed among all tasks
    """
    min: StepTresUsageMin | None = None
    """
    Minimum TRES usage consumed among all tasks
    """
    total: TresList | None = None
    """
    Total TRES usage consumed among all tasks
    """


class Requested(BaseModel):
    average: TresList | None = None
    """
    Average TRES usage requested among all tasks
    """
    max: StepTresReqMax | None = None
    """
    Maximum TRES usage requested among all tasks
    """
    min: StepTresReqMin | None = None
    """
    Minimum TRES usage requested among all tasks
    """
    total: TresList | None = None
    """
    Total TRES usage requested among all tasks
    """


class Tres7(BaseModel):
    allocated: TresList | None = None
    """
    Trackable resources allocated to the step
    """
    consumed: Consumed | None = None
    requested: Requested | None = None


class Step(BaseModel):
    CPU: CPU | None = None
    exit_code: ProcessExitCodeVerbose | None = None
    """
    Exit code
    """
    kill_request_user: str | None = None
    """
    User ID that requested termination of the step
    """
    nodes: Nodes3 | None = None
    pid: str | None = None
    """
    Deprecated; Process ID
    """
    state: JobState | None = None
    """
    Current state
    """
    statistics: Statistics | None = None
    step: Step1 | None = None
    task: Task | None = None
    tasks: Tasks | None = None
    time: Time4 | None = None
    tres: Tres7 | None = None


class StepList(RootModel[list[Step]]):
    root: list[Step]


class User2(BaseModel):
    administrator_level: AdminLvl | None = None
    """
    AdminLevel granted to the user
    """
    associations: AssocShortList | None = None
    """
    Associations created for this user
    """
    coordinators: CoordList | None = None
    """
    Accounts this user is a coordinator for
    """
    default: Default1 | None = None
    flags: UserFlags | None = None
    """
    Flags associated with this user
    """
    name: str
    """
    User name
    """
    old_name: str | None = None
    """
    Previous user name
    """
    wckeys: WckeyList | None = None
    """
    List of available WCKeys
    """


class UserList(RootModel[list[User2]]):
    root: list[User2]


class AssocSharesObjList(RootModel[list[AssocSharesObjWrap]]):
    root: list[AssocSharesObjWrap]


class Job(BaseModel):
    account: str | None = None
    """
    Account the job ran under
    """
    allocation_nodes: int | None = None
    """
    List of nodes allocated to the job
    """
    array: Array | None = None
    association: AssocShort | None = None
    """
    Unique identifier for the association
    """
    block: str | None = None
    """
    The name of the block to be used (used with Blue Gene systems)
    """
    cluster: str | None = None
    """
    Cluster name
    """
    comment: Comment | None = None
    constraints: str | None = None
    """
    Feature(s) the job requested as a constraint
    """
    container: str | None = None
    """
    Absolute path to OCI container bundle
    """
    derived_exit_code: ProcessExitCodeVerbose | None = None
    """
    Highest exit code of all job steps
    """
    exit_code: ProcessExitCodeVerbose | None = None
    """
    Exit code
    """
    extra: str | None = None
    """
    Arbitrary string used for node filtering if extra constraints are enabled
    """
    failed_node: str | None = None
    """
    Name of node that caused job failure
    """
    flags: SlurmdbJobFlags | None = None
    """
    Flags associated with this job
    """
    group: str | None = None
    """
    Group ID of the user that owns the job
    """
    het: Het | None = None
    hold: bool | None = None
    """
    Hold (true) or release (false) job
    """
    job_id: int | None = None
    """
    Job ID
    """
    kill_request_user: str | None = None
    """
    User ID that requested termination of the job
    """
    licenses: str | None = None
    """
    License(s) required by the job
    """
    mcs: Mcs | None = None
    name: str | None = None
    """
    Job name
    """
    nodes: str | None = None
    """
    Node(s) allocated to the job
    """
    partition: str | None = None
    """
    Partition assigned to the job
    """
    priority: Uint32NoValStruct | None = None
    """
    Request specific job priority
    """
    qos: str | None = None
    """
    Quality of Service assigned to the job
    """
    qosreq: str | None = None
    """
    Requested QOS
    """
    required: Required | None = None
    reservation: Reservation | None = None
    restart_cnt: int | None = None
    """
    How many times this job has been requeued/restarted
    """
    script: str | None = None
    """
    Job batch script; only the first component in a HetJob is populated or honored
    """
    state: State | None = None
    stderr: str | None = None
    """
    Path to stderr file
    """
    stderr_expanded: str | None = None
    """
    Job stderr with expanded fields
    """
    stdin: str | None = None
    """
    Path to stdin file
    """
    stdin_expanded: str | None = None
    """
    Job stdin with expanded fields
    """
    stdout: str | None = None
    """
    Path to stdout file
    """
    stdout_expanded: str | None = None
    """
    Job stdout with expanded fields
    """
    steps: StepList | None = None
    """
    Individual steps in the job
    """
    submit_line: str | None = None
    """
    Command used to submit the job
    """
    time: Time1 | None = None
    tres: Tres3 | None = None
    used_gres: str | None = None
    """
    Generic resources used by job
    """
    user: str | None = None
    """
    User that owns the job
    """
    wckey: WckeyTagStruct | None = None
    """
    Workload characterization key
    """
    working_directory: str | None = None
    """
    Path to current working directory
    """


class JobList(RootModel[list[Job]]):
    root: list[Job]


class Nodes(BaseModel):
    allocation: JobResNodes | None = None
    """
    Allocated node resources
    """
    count: int | None = None
    """
    Number of allocated nodes
    """
    list: str | None = None
    """
    Node(s) allocated to the job
    """
    select_type: NodeCrType | None = None
    """
    Node scheduling selection method
    """
    whole: bool | None = None
    """
    Whether whole nodes were allocated
    """


class JobRes(BaseModel):
    cpus: int
    """
    Number of allocated CPUs
    """
    nodes: Nodes | None = None
    select_type: CrType
    """
    Scheduler consumable resource selection type
    """
    threads_per_core: Uint16NoValStruct
    """
    Number of processor threads per CPU core
    """


class OpenapiSlurmdbdConfigResp(BaseModel):
    accounts: AccountList | None = None
    """
    Accounts
    """
    associations: AssocList | None = None
    """
    Associations
    """
    clusters: ClusterRecList | None = None
    """
    Clusters
    """
    errors: OpenapiErrors | None = None
    """
    Query errors
    """
    instances: InstanceList | None = None
    """
    Instances
    """
    meta: OpenapiMeta | None = None
    """
    Slurm meta values
    """
    qos: QosList | None = None
    """
    QOS
    """
    tres: TresList | None = None
    """
    TRES
    """
    users: UserList | None = None
    """
    Users
    """
    warnings: OpenapiWarnings | None = None
    """
    Query warnings
    """
    wckeys: WckeyList | None = None
    """
    WCKeys
    """


class OpenapiSlurmdbdJobsResp(BaseModel):
    errors: OpenapiErrors | None = None
    """
    Query errors
    """
    jobs: JobList
    """
    jobs
    """
    meta: OpenapiMeta | None = None
    """
    Slurm meta values
    """
    warnings: OpenapiWarnings | None = None
    """
    Query warnings
    """


class OpenapiUsersResp(BaseModel):
    errors: OpenapiErrors | None = None
    """
    Query errors
    """
    meta: OpenapiMeta | None = None
    """
    Slurm meta values
    """
    users: UserList
    """
    users
    """
    warnings: OpenapiWarnings | None = None
    """
    Query warnings
    """


class SharesRespMsg(BaseModel):
    shares: AssocSharesObjList | None = None
    """
    Association shares
    """
    total_shares: int | None = None
    """
    Total number of shares
    """


class JobInfo(BaseModel):
    account: str | None = None
    """
    Account associated with the job
    """
    accrue_time: Uint64NoValStruct | None = None
    """
    When the job started accruing age priority (UNIX timestamp)
    """
    admin_comment: str | None = None
    """
    Arbitrary comment made by administrator
    """
    allocating_node: str | None = None
    """
    Local node making the resource allocation
    """
    array_job_id: Uint32NoValStruct | None = None
    """
    Job ID of job array, or 0 if N/A
    """
    array_max_tasks: Uint32NoValStruct | None = None
    """
    Maximum number of simultaneously running array tasks, 0 if no limit
    """
    array_task_id: Uint32NoValStruct | None = None
    """
    Task ID of this task in job array
    """
    array_task_string: str | None = None
    """
    String expression of task IDs in this record
    """
    association_id: int | None = None
    """
    Unique identifier for the association
    """
    batch_features: str | None = None
    """
    Features required for batch script's node
    """
    batch_flag: bool | None = None
    """
    True if batch job
    """
    batch_host: str | None = None
    """
    Name of host running batch script
    """
    billable_tres: Float64NoValStruct | None = None
    """
    Billable TRES
    """
    burst_buffer: str | None = None
    """
    Burst buffer specifications
    """
    burst_buffer_state: str | None = None
    """
    Burst buffer state details
    """
    cluster: str | None = None
    """
    Cluster name
    """
    cluster_features: str | None = None
    """
    List of required cluster features
    """
    command: str | None = None
    """
    Executed command
    """
    comment: str | None = None
    """
    Arbitrary comment
    """
    container: str | None = None
    """
    Absolute path to OCI container bundle
    """
    container_id: str | None = None
    """
    OCI container ID
    """
    contiguous: bool | None = None
    """
    True if job requires contiguous nodes
    """
    core_spec: int | None = None
    """
    Specialized core count
    """
    cores_per_socket: Uint16NoValStruct | None = None
    """
    Cores per socket required
    """
    cpu_frequency_governor: Uint32NoValStruct | None = None
    """
    CPU frequency governor
    """
    cpu_frequency_maximum: Uint32NoValStruct | None = None
    """
    Maximum CPU frequency
    """
    cpu_frequency_minimum: Uint32NoValStruct | None = None
    """
    Minimum CPU frequency
    """
    cpus: Uint32NoValStruct | None = None
    """
    Minimum number of CPUs required
    """
    cpus_per_task: Uint16NoValStruct | None = None
    """
    Number of CPUs required by each task
    """
    cpus_per_tres: str | None = None
    """
    Semicolon delimited list of TRES=# values indicating how many CPUs should be allocated for each specified TRES (currently only used for gres/gpu)
    """
    cron: str | None = None
    """
    Time specification for scrontab job
    """
    current_working_directory: str | None = None
    """
    Working directory to use for the job
    """
    deadline: Uint64NoValStruct | None = None
    """
    Latest time that the job may start (UNIX timestamp)
    """
    delay_boot: Uint32NoValStruct | None = None
    """
    Number of seconds after job eligible start that nodes will be rebooted to satisfy feature specification
    """
    dependency: str | None = None
    """
    Other jobs that must meet certain criteria before this job can start
    """
    derived_exit_code: ProcessExitCodeVerbose | None = None
    """
    Highest exit code of all job steps
    """
    eligible_time: Uint64NoValStruct | None = None
    """
    Time when the job became eligible to run (UNIX timestamp)
    """
    end_time: Uint64NoValStruct | None = None
    """
    End time, real or expected (UNIX timestamp)
    """
    excluded_nodes: str | None = None
    """
    Comma separated list of nodes that may not be used
    """
    exit_code: ProcessExitCodeVerbose | None = None
    """
    Exit code of the job
    """
    extra: str | None = None
    """
    Arbitrary string used for node filtering if extra constraints are enabled
    """
    failed_node: str | None = None
    """
    Name of node that caused job failure
    """
    features: str | None = None
    """
    Comma separated list of features that are required
    """
    federation_origin: str | None = None
    """
    Origin cluster's name (when using federation)
    """
    federation_siblings_active: str | None = None
    """
    Active sibling job names
    """
    federation_siblings_viable: str | None = None
    """
    Viable sibling job names
    """
    flags: JobFlags | None = None
    """
    Job flags
    """
    gres_detail: JobInfoGresDetail | None = None
    """
    List of GRES index and counts allocated per node
    """
    group_id: int | None = None
    """
    Group ID of the user that owns the job
    """
    group_name: str | None = None
    """
    Group name of the user that owns the job
    """
    het_job_id: Uint32NoValStruct | None = None
    """
    Heterogeneous job ID, if applicable
    """
    het_job_id_set: str | None = None
    """
    Job ID range for all heterogeneous job components
    """
    het_job_offset: Uint32NoValStruct | None = None
    """
    Unique sequence number applied to this component of the heterogeneous job
    """
    hold: bool | None = None
    """
    Hold (true) or release (false) job
    """
    job_id: int | None = None
    """
    Job ID
    """
    job_resources: JobRes | None = None
    """
    Resources used by the job
    """
    job_size_str: CsvString | None = None
    """
    Number of nodes (in a range) required for this job
    """
    job_state: JobState | None = None
    """
    Current state
    """
    last_sched_evaluation: Uint64NoValStruct | None = None
    """
    Last time job was evaluated for scheduling (UNIX timestamp)
    """
    licenses: str | None = None
    """
    License(s) required by the job
    """
    mail_type: JobMailFlags | None = None
    """
    Mail event type(s)
    """
    mail_user: str | None = None
    """
    User to receive email notifications
    """
    max_cpus: Uint32NoValStruct | None = None
    """
    Maximum number of CPUs usable by the job
    """
    max_nodes: Uint32NoValStruct | None = None
    """
    Maximum number of nodes usable by the job
    """
    maximum_switch_wait_time: int | None = None
    """
    Maximum time to wait for switches in seconds
    """
    mcs_label: str | None = None
    """
    Multi-Category Security label on the job
    """
    memory_per_cpu: Uint64NoValStruct | None = None
    """
    Minimum memory in megabytes per allocated CPU
    """
    memory_per_node: Uint64NoValStruct | None = None
    """
    Minimum memory in megabytes per allocated node
    """
    memory_per_tres: str | None = None
    """
    Semicolon delimited list of TRES=# values indicating how much memory in megabytes should be allocated for each specified TRES (currently only used for gres/gpu)
    """
    minimum_cpus_per_node: Uint16NoValStruct | None = None
    """
    Minimum number of CPUs per node
    """
    minimum_tmp_disk_per_node: Uint32NoValStruct | None = None
    """
    Minimum tmp disk space required per node
    """
    name: str | None = None
    """
    Job name
    """
    network: str | None = None
    """
    Network specs for the job
    """
    nice: int | None = None
    """
    Requested job priority change
    """
    node_count: Uint32NoValStruct | None = None
    """
    Minimum number of nodes required
    """
    nodes: str | None = None
    """
    Node(s) allocated to the job
    """
    partition: str | None = None
    """
    Partition assigned to the job
    """
    power: Power | None = None
    pre_sus_time: Uint64NoValStruct | None = None
    """
    Total run time prior to last suspend in seconds
    """
    preempt_time: Uint64NoValStruct | None = None
    """
    Time job received preemption signal (UNIX timestamp)
    """
    preemptable_time: Uint64NoValStruct | None = None
    """
    Time job becomes eligible for preemption (UNIX timestamp)
    """
    prefer: str | None = None
    """
    Feature(s) the job requested but that are not required
    """
    priority: Uint32NoValStruct | None = None
    """
    Request specific job priority
    """
    priority_by_partition: PriorityByPartition | None = None
    """
    Prospective job priority in each partition that may be used by this job
    """
    profile: AcctGatherProfile | None = None
    """
    Profile used by the acct_gather_profile plugin
    """
    qos: str | None = None
    """
    Quality of Service assigned to the job, if pending the QOS requested
    """
    reboot: bool | None = None
    """
    Node reboot requested before start
    """
    requeue: bool | None = None
    """
    Determines whether the job may be requeued
    """
    required_nodes: str | None = None
    """
    Comma separated list of required nodes
    """
    required_switches: int | None = None
    """
    Maximum number of switches
    """
    resize_time: Uint64NoValStruct | None = None
    """
    Time of last size change (UNIX timestamp)
    """
    restart_cnt: int | None = None
    """
    Number of job restarts
    """
    resv_name: str | None = None
    """
    Name of reservation to use
    """
    scheduled_nodes: str | None = None
    """
    List of nodes scheduled to be used for the job
    """
    selinux_context: str | None = None
    """
    SELinux context
    """
    shared: JobShared | None = None
    """
    How the job can share resources with other jobs, if at all
    """
    sockets_per_board: int | None = None
    """
    Number of sockets per board required
    """
    sockets_per_node: Uint16NoValStruct | None = None
    """
    Number of sockets per node required
    """
    standard_error: str | None = None
    """
    Path to stderr file
    """
    standard_input: str | None = None
    """
    Path to stdin file
    """
    standard_output: str | None = None
    """
    Path to stdout file
    """
    start_time: Uint64NoValStruct | None = None
    """
    Time execution began, or is expected to begin (UNIX timestamp)
    """
    state_description: str | None = None
    """
    Optional details for state_reason
    """
    state_reason: str | None = None
    """
    Reason for current Pending or Failed state
    """
    submit_time: Uint64NoValStruct | None = None
    """
    Time when the job was submitted (UNIX timestamp)
    """
    suspend_time: Uint64NoValStruct | None = None
    """
    Time the job was last suspended or resumed (UNIX timestamp)
    """
    system_comment: str | None = None
    """
    Arbitrary comment from slurmctld
    """
    tasks: Uint32NoValStruct | None = None
    """
    Number of tasks
    """
    tasks_per_board: Uint16NoValStruct | None = None
    """
    Number of tasks invoked on each board
    """
    tasks_per_core: Uint16NoValStruct | None = None
    """
    Number of tasks invoked on each core
    """
    tasks_per_node: Uint16NoValStruct | None = None
    """
    Number of tasks invoked on each node
    """
    tasks_per_socket: Uint16NoValStruct | None = None
    """
    Number of tasks invoked on each socket
    """
    tasks_per_tres: Uint16NoValStruct | None = None
    """
    Number of tasks that can assess each GPU
    """
    thread_spec: int | None = None
    """
    Specialized thread count
    """
    threads_per_core: Uint16NoValStruct | None = None
    """
    Number of processor threads per CPU core required
    """
    time_limit: Uint32NoValStruct | None = None
    """
    Maximum run time in minutes
    """
    time_minimum: Uint32NoValStruct | None = None
    """
    Minimum run time in minutes
    """
    tres_alloc_str: str | None = None
    """
    TRES used by the job
    """
    tres_bind: str | None = None
    """
    Task to TRES binding directives
    """
    tres_freq: str | None = None
    """
    TRES frequency directives
    """
    tres_per_job: str | None = None
    """
    Comma separated list of TRES=# values to be allocated per job
    """
    tres_per_node: str | None = None
    """
    Comma separated list of TRES=# values to be allocated per node
    """
    tres_per_socket: str | None = None
    """
    Comma separated list of TRES=# values to be allocated per socket
    """
    tres_per_task: str | None = None
    """
    Comma separated list of TRES=# values to be allocated per task
    """
    tres_req_str: str | None = None
    """
    TRES requested by the job
    """
    user_id: int | None = None
    """
    User ID that owns the job
    """
    user_name: str | None = None
    """
    User name that owns the job
    """
    wckey: str | None = None
    """
    Workload characterization key
    """


class JobInfoMsg(RootModel[list[JobInfo]]):
    root: list[JobInfo]
